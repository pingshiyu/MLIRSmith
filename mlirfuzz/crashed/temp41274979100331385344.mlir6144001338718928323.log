mlir-opt: /home/jacob/projects/MLIRSmith/llvm/include/llvm/ADT/SmallVector.h:294: T& llvm::SmallVectorTemplateCommon<T, <template-parameter-1-2> >::operator[](llvm::SmallVectorTemplateCommon<T, <template-parameter-1-2> >::size_type) [with T = mlir::Attribute; <template-parameter-1-2> = void; llvm::SmallVectorTemplateCommon<T, <template-parameter-1-2> >::reference = mlir::Attribute&; llvm::SmallVectorTemplateCommon<T, <template-parameter-1-2> >::size_type = long unsigned int]: Assertion `idx < size()' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: ../build/bin/mlir-opt --eliminate-empty-tensors --convert-complex-to-standard --gpu-to-llvm --test-pdl-bytecode-pass --affine-data-copy-generate --int-range-optimizations --affine-data-copy-generate --affine-expand-index-ops --test-compose-subview --test-elements-attr-interface --async-runtime-ref-counting-opt generated/temp41274979100331385344.mlir
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  mlir-opt        0x0000563b96657bdb llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 59
1  mlir-opt        0x0000563b966549cc
2  libpthread.so.0 0x00007fe2ccdbd980
3  libc.so.6       0x00007fe2cb9eae87 gsignal + 199
4  libc.so.6       0x00007fe2cb9ec7f1 abort + 321
5  libc.so.6       0x00007fe2cb9dc3fa
6  libc.so.6       0x00007fe2cb9dc472
7  mlir-opt        0x0000563b9827ee38
8  mlir-opt        0x0000563b982b29a3
9  mlir-opt        0x0000563b982c1270
10 mlir-opt        0x0000563b98fc34de mlir::Operation::fold(llvm::ArrayRef<mlir::Attribute>, llvm::SmallVectorImpl<mlir::OpFoldResult>&) + 62
11 mlir-opt        0x0000563b98fc387d mlir::Operation::fold(llvm::SmallVectorImpl<mlir::OpFoldResult>&) + 733
12 mlir-opt        0x0000563b98f0c841 mlir::OpBuilder::tryFold(mlir::Operation*, llvm::SmallVectorImpl<mlir::Value>&) + 193
13 mlir-opt        0x0000563b98e7c5d3
14 mlir-opt        0x0000563b98e7d3a8
15 mlir-opt        0x0000563b98e80e70 mlir::applyPartialConversion(mlir::Operation*, mlir::ConversionTarget const&, mlir::FrozenRewritePatternSet const&, llvm::DenseSet<mlir::Operation*, llvm::DenseMapInfo<mlir::Operation*, void>>*) + 96
16 mlir-opt        0x0000563b984be53b
17 mlir-opt        0x0000563b98dcf301 mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int) + 1297
18 mlir-opt        0x0000563b98dd0223
19 mlir-opt        0x0000563b98dd08c1 mlir::PassManager::run(mlir::Operation*) + 1153
20 mlir-opt        0x0000563b98dc0efc
21 mlir-opt        0x0000563b98dc28b5
22 mlir-opt        0x0000563b98dc2a71
23 mlir-opt        0x0000563b98ec8260 mlir::splitAndProcessBuffer(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::function_ref<mlir::LogicalResult (std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&)>, llvm::raw_ostream&, bool, bool) + 96
24 mlir-opt        0x0000563b98dbbbc9 mlir::MlirOptMain(llvm::raw_ostream&, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, mlir::DialectRegistry&, mlir::MlirOptMainConfig const&) + 185
25 mlir-opt        0x0000563b98dc2d9a mlir::MlirOptMain(int, char**, llvm::StringRef, mlir::DialectRegistry&) + 746
26 mlir-opt        0x0000563b965aa0c5 main + 165
27 libc.so.6       0x00007fe2cb9cdc87 __libc_start_main + 231
28 mlir-opt        0x0000563b9662b95a _start + 42
Aborted
