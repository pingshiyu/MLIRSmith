mlir-opt: /home/jacob/projects/MLIRSmith/llvm/include/llvm/ADT/SmallVector.h:294: T& llvm::SmallVectorTemplateCommon<T, <template-parameter-1-2> >::operator[](llvm::SmallVectorTemplateCommon<T, <template-parameter-1-2> >::size_type) [with T = mlir::Attribute; <template-parameter-1-2> = void; llvm::SmallVectorTemplateCommon<T, <template-parameter-1-2> >::reference = mlir::Attribute&; llvm::SmallVectorTemplateCommon<T, <template-parameter-1-2> >::size_type = long unsigned int]: Assertion `idx < size()' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: ../build/bin/mlir-opt --test-written-to generated/temp15929016135576156928.mlir
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  mlir-opt        0x0000564b9ea57bdb llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 59
1  mlir-opt        0x0000564b9ea549cc
2  libpthread.so.0 0x00007fb4da6e3980
3  libc.so.6       0x00007fb4d9310e87 gsignal + 199
4  libc.so.6       0x00007fb4d93127f1 abort + 321
5  libc.so.6       0x00007fb4d93023fa
6  libc.so.6       0x00007fb4d9302472
7  mlir-opt        0x0000564ba067ee38
8  mlir-opt        0x0000564ba06b29a3
9  mlir-opt        0x0000564ba06c1270
10 mlir-opt        0x0000564ba13c34de mlir::Operation::fold(llvm::ArrayRef<mlir::Attribute>, llvm::SmallVectorImpl<mlir::OpFoldResult>&) + 62
11 mlir-opt        0x0000564ba11975ee mlir::dataflow::SparseConstantPropagation::visitOperation(mlir::Operation*, llvm::ArrayRef<mlir::dataflow::Lattice<mlir::dataflow::ConstantValue> const*>, llvm::ArrayRef<mlir::dataflow::Lattice<mlir::dataflow::ConstantValue>*>) + 1086
12 mlir-opt        0x0000564ba11b2c2a mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::visitOperation(mlir::Operation*) + 1114
13 mlir-opt        0x0000564ba11b4389 mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::initializeRecursively(mlir::Operation*) + 25
14 mlir-opt        0x0000564ba11b44c5 mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::initializeRecursively(mlir::Operation*) + 341
15 mlir-opt        0x0000564ba11b44c5 mlir::dataflow::AbstractSparseForwardDataFlowAnalysis::initializeRecursively(mlir::Operation*) + 341
16 mlir-opt        0x0000564ba11609a4 mlir::DataFlowSolver::initializeAndRun(mlir::Operation*) + 100
17 mlir-opt        0x0000564ba0cb8a1b
18 mlir-opt        0x0000564ba11cf301 mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int) + 1297
19 mlir-opt        0x0000564ba11d0223
20 mlir-opt        0x0000564ba11d08c1 mlir::PassManager::run(mlir::Operation*) + 1153
21 mlir-opt        0x0000564ba11c0efc
22 mlir-opt        0x0000564ba11c28b5
23 mlir-opt        0x0000564ba11c2a71
24 mlir-opt        0x0000564ba12c8260 mlir::splitAndProcessBuffer(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::function_ref<mlir::LogicalResult (std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&)>, llvm::raw_ostream&, bool, bool) + 96
25 mlir-opt        0x0000564ba11bbbc9 mlir::MlirOptMain(llvm::raw_ostream&, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, mlir::DialectRegistry&, mlir::MlirOptMainConfig const&) + 185
26 mlir-opt        0x0000564ba11c2d9a mlir::MlirOptMain(int, char**, llvm::StringRef, mlir::DialectRegistry&) + 746
27 mlir-opt        0x0000564b9e9aa0c5 main + 165
28 libc.so.6       0x00007fb4d92f3c87 __libc_start_main + 231
29 mlir-opt        0x0000564b9ea2b95a _start + 42
Aborted
