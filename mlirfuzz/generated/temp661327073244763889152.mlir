"builtin.module"() ({
  "func.func"() <{function_type = () -> (), sym_name = "func1", sym_visibility = "private"}> ({
    %0 = "arith.constant"() <{value = 2025407758 : i32}> : () -> i32
    %1 = "arith.constant"() <{value = -19558 : i16}> : () -> i16
    %2 = "arith.constant"() <{value = 3.244800e+04 : f16}> : () -> f16
    %3 = "arith.constant"() <{value = -29205 : i16}> : () -> i16
    %4 = "arith.constant"() <{value = 820853008 : i64}> : () -> i64
    %5 = "arith.constant"() <{value = -25848 : i16}> : () -> i16
    %6 = "arith.constant"() <{value = false}> : () -> i1
    %7 = "arith.constant"() <{value = 1183307392 : i64}> : () -> i64
    %8 = "arith.constant"() <{value = 15330 : i16}> : () -> i16
    %9 = "arith.constant"() <{value = 482292773 : i64}> : () -> i64
    %10 = "arith.constant"() <{value = false}> : () -> i1
    %11 = "arith.constant"() <{value = true}> : () -> i1
    %12 = "arith.constant"() <{value = true}> : () -> i1
    %13 = "arith.constant"() <{value = false}> : () -> i1
    %14 = "arith.constant"() <{value = 1.491200e+04 : f16}> : () -> f16
    %15 = "arith.constant"() <{value = 585568192 : i32}> : () -> i32
    %16 = "arith.constant"() <{value = 0 : index}> : () -> index
    %17 = "arith.constant"() <{value = 1 : index}> : () -> index
    %18 = "arith.constant"() <{value = 2 : index}> : () -> index
    %19 = "arith.constant"() <{value = 3 : index}> : () -> index
    %20 = "arith.constant"() <{value = 4 : index}> : () -> index
    %21 = "arith.constant"() <{value = 5 : index}> : () -> index
    %22 = "arith.constant"() <{value = 6 : index}> : () -> index
    %23 = "arith.constant"() <{value = 7 : index}> : () -> index
    %24 = "arith.constant"() <{value = 8 : index}> : () -> index
    %25 = "arith.constant"() <{value = 9 : index}> : () -> index
    %26 = "arith.constant"() <{value = 10 : index}> : () -> index
    %27 = "arith.constant"() <{value = 11 : index}> : () -> index
    %28 = "arith.constant"() <{value = 12 : index}> : () -> index
    %29 = "arith.constant"() <{value = 13 : index}> : () -> index
    %30 = "arith.constant"() <{value = 14 : index}> : () -> index
    %31 = "arith.constant"() <{value = 15 : index}> : () -> index
    %32 = "arith.constant"() <{value = 16 : index}> : () -> index
    %33 = "arith.constant"() <{value = 17 : index}> : () -> index
    %34 = "arith.constant"() <{value = 18 : index}> : () -> index
    %35 = "arith.constant"() <{value = 19 : index}> : () -> index
    %36 = "arith.constant"() <{value = 20 : index}> : () -> index
    %37 = "arith.constant"() <{value = 21 : index}> : () -> index
    %38 = "arith.constant"() <{value = 22 : index}> : () -> index
    %39 = "arith.constant"() <{value = 23 : index}> : () -> index
    %40 = "arith.constant"() <{value = 24 : index}> : () -> index
    %41 = "arith.constant"() <{value = 25 : index}> : () -> index
    %42 = "arith.constant"() <{value = 26 : index}> : () -> index
    %43 = "arith.constant"() <{value = 27 : index}> : () -> index
    %44 = "arith.constant"() <{value = 28 : index}> : () -> index
    %45 = "arith.constant"() <{value = 29 : index}> : () -> index
    %46 = "arith.constant"() <{value = 30 : index}> : () -> index
    %47 = "arith.constant"() <{value = 31 : index}> : () -> index
    %48 = "tensor.empty"() : () -> tensor<21x18x31xi64>
    %49 = "tensor.empty"() : () -> tensor<21x18x31xf16>
    %50 = "tensor.empty"(%38) : (index) -> tensor<?xf32>
    %51 = "tensor.empty"(%43) : (index) -> tensor<?xi64>
    %52 = "tensor.empty"() : () -> tensor<31xf32>
    %53 = "tensor.empty"(%21) : (index) -> tensor<?xi64>
    %54 = "tensor.empty"() : () -> tensor<31xi1>
    %55 = "tensor.empty"(%20, %21, %44) : (index, index, index) -> tensor<?x?x?xi64>
    %56 = "tensor.empty"() : () -> tensor<21x18x31xf16>
    %57 = "tensor.empty"() : () -> tensor<28xf32>
    %58 = "tensor.empty"(%38, %28, %20) : (index, index, index) -> tensor<?x?x?xf16>
    %59 = "tensor.empty"() : () -> tensor<31x28x28xf32>
    %60 = "tensor.empty"(%43, %40) : (index, index) -> tensor<?x?x31xi1>
    %61 = "tensor.empty"() : () -> tensor<31xi64>
    %62 = "tensor.empty"() : () -> tensor<31xi16>
    %63 = "tensor.empty"(%33) : (index) -> tensor<?xi1>
    %64 = "memref.alloc"(%26) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi32>
    %65 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31xf32>
    %66 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xi1>
    %67 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<28xf32>
    %68 = "memref.alloc"(%45, %28, %22) <{operandSegmentSizes = array<i32: 3, 0>}> : (index, index, index) -> memref<?x?x?xi32>
    %69 = "memref.alloc"(%30, %21, %45) <{operandSegmentSizes = array<i32: 3, 0>}> : (index, index, index) -> memref<?x?x?xf16>
    %70 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xi1>
    %71 = "memref.alloc"(%39) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi16>
    %72 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31xi16>
    %73 = "memref.alloc"(%20) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi32>
    %74 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xi1>
    %75 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xf16>
    %76 = "memref.alloc"(%26, %23, %36) <{operandSegmentSizes = array<i32: 3, 0>}> : (index, index, index) -> memref<?x?x?xi16>
    %77 = "memref.alloc"(%21) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %78 = "memref.alloc"(%47) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xf16>
    %79 = "memref.alloc"(%47, %21) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?x28xi32>
    %80 = "spirv.GL.FSign"(%14) : (f16) -> f16
    %81 = "spirv.SLessThanEqual"(%1, %3) : (i16, i16) -> i1
    %82 = "spirv.CL.cos"(%80) : (f16) -> f16
    %83 = "spirv.GL.Tanh"(%80) : (f16) -> f16
    %84 = "spirv.CL.sin"(%14) : (f16) -> f16
    %85 = "vector.broadcast"(%0) : (i32) -> vector<2xi32>
    %86 = "spirv.BitwiseXor"(%85, %85) : (vector<2xi32>, vector<2xi32>) -> vector<2xi32>
    %87 = "index.shl"(%47, %33) : (index, index) -> index
    %88 = "spirv.CL.rint"(%2) : (f16) -> f16
    %89 = "spirv.GL.InverseSqrt"(%88) : (f16) -> f16
    %90 = "tensor.from_elementsi64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> tensor<31x28x28xi64>
    %91 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<28xi64>
    %92 = "arith.remsi"(%6, %12) : (i1, i1) -> i1
    %93 = "spirv.CL.tanh"(%80) : (f16) -> f16
    %94 = "vector.multi_reduction"(%85, %85) <{kind = #vector.kind<xor>, reduction_dims = []}> : (vector<2xi32>, vector<2xi32>) -> vector<2xi32>
    %95 = "arith.negf"(%84) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
    %96 = "spirv.GL.Pow"(%2, %89) : (f16, f16) -> f16
    %97 = "arith.muli"(%13, %12) : (i1, i1) -> i1
    %98 = "spirv.CL.ceil"(%83) : (f16) -> f16
    %99 = "math.log"(%80) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
    %100 = "spirv.GL.Cosh"(%98) : (f16) -> f16
    %101 = "spirv.GL.FMix"(%14, %2, %84) : (f16, f16, f16) -> f16
    %102 = "spirv.CL.u_min"(%3, %1) : (i16, i16) -> i16
    %103 = "spirv.SGreaterThan"(%0, %0) : (i32, i32) -> i1
    %104 = "spirv.GL.Atan"(%101) : (f16) -> f16
    %105 = "math.copysign"(%100, %2) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
    %106 = "spirv.FOrdLessThanEqual"(%98, %98) : (f16, f16) -> i1
    %107 = "spirv.GL.UMax"(%5, %5) : (i16, i16) -> i16
    %108 = "spirv.CL.u_min"(%8, %1) : (i16, i16) -> i16
    %109 = "spirv.UGreaterThanEqual"(%102, %1) : (i16, i16) -> i1
    %110 = "spirv.CL.log"(%93) : (f16) -> f16
    %111 = "vector.insertelement"(%15, %85, %43) : (i32, vector<2xi32>, index) -> vector<2xi32>
    %112 = "spirv.CL.fmin"(%89, %101) : (f16, f16) -> f16
    %113 = "tensor.generate"(%16, %20, %36) ({
    ^bb0(%arg0: index, %arg1: index, %arg2: index):
      "scf.parallel"(%46, %29, %arg1, %38, %17, %37) <{operandSegmentSizes = array<i32: 2, 2, 2, 0>}> ({
      ^bb0(%arg3: index, %arg4: index):
        %214 = "tensor.empty"() : () -> tensor<31x28x28xi32>
        %215 = "math.fpowi"(%59, %214) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>, tensor<31x28x28xi32>) -> tensor<31x28x28xf32>
        %216 = "vector.flat_transpose"(%85) <{columns = 1 : i32, rows = 2 : i32}> : (vector<2xi32>) -> vector<2xi32>
        %217 = "linalg.copy"(%55, %55) <{operandSegmentSizes = array<i32: 1, 1>}> ({
        ^bb0(%arg5: i64, %arg6: i64):
          "linalg.yield"(%arg5) : (i64) -> ()
        }) : (tensor<?x?x?xi64>, tensor<?x?x?xi64>) -> tensor<?x?x?xi64>
        %218 = "vector.insertelement"(%15, %216, %34) : (i32, vector<2xi32>, index) -> vector<2xi32>
        "affine.store"(%98, %69, %37, %37, %18) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (f16, memref<?x?x?xf16>, index, index, index) -> ()
        %219 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
        %220 = "vector.broadcast"(%219) : (f32) -> vector<31x28x28xf32>
        %221 = "vector.fma"(%220, %220, %220) : (vector<31x28x28xf32>, vector<31x28x28xf32>, vector<31x28x28xf32>) -> vector<31x28x28xf32>
        %222 = "arith.divui"(%108, %108) : (i16, i16) -> i16
        %223 = "math.cttz"(%55) : (tensor<?x?x?xi64>) -> tensor<?x?x?xi64>
        %224 = "vector.extract_strided_slice"(%221) <{offsets = [18], sizes = [1], strides = [1]}> : (vector<31x28x28xf32>) -> vector<1x28x28xf32>
        %225 = "math.tanh"(%219) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
        %226 = "math.ctpop"(%51) : (tensor<?xi64>) -> tensor<?xi64>
        %227 = "tensor.cast"(%214) : (tensor<31x28x28xi32>) -> tensor<?x?x?xi32>
        %228 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31xi64>
        %229 = "vector.broadcast"(%4) : (i64) -> vector<21x18x31xi64>
        %230 = "vector.broadcast"(%109) : (i1) -> vector<21x18x31xi1>
        %231 = "vector.broadcast"(%0) : (i32) -> vector<21x18x31xi32>
        %232 = "vector.gather"(%228, %21, %231, %230, %229) : (memref<31xi64>, index, vector<21x18x31xi32>, vector<21x18x31xi1>, vector<21x18x31xi64>) -> vector<21x18x31xi64>
        %233 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<21x18x31xi32>
        %234 = "vector.gather"(%233, %37, %29, %27, %231, %230, %231) : (memref<21x18x31xi32>, index, index, index, vector<21x18x31xi32>, vector<21x18x31xi1>, vector<21x18x31xi32>) -> vector<21x18x31xi32>
        %235 = "vector.insertelement"(%0, %216, %33) : (i32, vector<2xi32>, index) -> vector<2xi32>
        %236 = "tensor.splat"(%109) : (i1) -> tensor<28xi1>
        "scf.yield"() : () -> ()
      }) : (index, index, index, index, index, index) -> ()
      %212 = "arith.remf"(%14, %104) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %213 = "vector.bitcast"(%85) : (vector<2xi32>) -> vector<2xi32>
      "memref.assume_alignment"(%76) <{alignment = 2 : i32}> : (memref<?x?x?xi16>) -> ()
      "tensor.yield"(%5) : (i16) -> ()
    }) : (index, index, index) -> tensor<?x?x?xi16>
    %114 = "spirv.LogicalNotEqual"(%6, %13) : (i1, i1) -> i1
    %115 = "vector.broadcast"(%12) : (i1) -> vector<18x31xi1>
    %116 = "vector.broadcast"(%103) : (i1) -> vector<31xi1>
    %117:2 = "vector.scan"(%115, %116) <{inclusive = true, kind = #vector.kind<maxui>, reduction_dim = 0 : i64}> : (vector<18x31xi1>, vector<31xi1>) -> (vector<18x31xi1>, vector<31xi1>)
    "affine.vector_store"(%85, %79, %46, %30, %17) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (vector<2xi32>, memref<?x?x28xi32>, index, index, index) -> ()
    %118 = "index.divu"(%26, %28) : (index, index) -> index
    %119 = "spirv.UGreaterThanEqual"(%102, %3) : (i16, i16) -> i1
    %120 = "spirv.CL.rsqrt"(%96) : (f16) -> f16
    %121 = "tensor.expand_shape"(%49) <{reassociation = [[0], [1], [2, 3]]}> : (tensor<21x18x31xf16>) -> tensor<21x18x31x1xf16>
    %122 = "spirv.CL.ceil"(%96) : (f16) -> f16
    %123 = "spirv.ULessThanEqual"(%1, %1) : (i16, i16) -> i1
    %124 = "spirv.FOrdEqual"(%89, %120) : (f16, f16) -> i1
    %125 = "scf.if"(%11) ({
      %212 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
      %213 = "vector.broadcast"(%212) : (f32) -> vector<21xf32>
      %214 = "vector.broadcast"(%81) : (i1) -> vector<21xi1>
      %215 = "vector.maskedload"(%65, %20, %214, %213) : (memref<31xf32>, index, vector<21xi1>, vector<21xf32>) -> vector<21xf32>
      %216 = "arith.cmpf"(%110, %100) <{predicate = 6 : i64}> : (f16, f16) -> i1
      %217 = "vector.shuffle"(%213, %215) <{mask = [0, 1, 2, 3, 4, 7, 9, 14, 17, 18, 20, 22, 23, 30, 31, 33, 34, 35, 37, 38, 39, 41]}> : (vector<21xf32>, vector<21xf32>) -> vector<22xf32>
      %218 = "arith.addi"(%12, %123) : (i1, i1) -> i1
      %219 = "math.copysign"(%80, %96) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %220 = "index.divs"(%87, %18) : (index, index) -> index
      %221 = "math.log"(%101) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      "linalg.transpose"(%76, %76) <{permutation = array<i64: 2, 0, 1>}> ({
      ^bb0(%arg0: i16, %arg1: i16):
        "linalg.yield"(%arg0) : (i16) -> ()
      }) : (memref<?x?x?xi16>, memref<?x?x?xi16>) -> ()
      "scf.yield"(%9) : (i64) -> ()
    }, {
      %212 = "math.log10"(%89) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %213 = "arith.cmpf"(%84, %104) <{predicate = 12 : i64}> : (f16, f16) -> i1
      %214 = "memref.atomic_rmw"(%102, %71, %16) <{kind = 11 : i64}> : (i16, memref<?xi16>, index) -> i16
      %215 = "tensor.empty"() : () -> tensor<21x18x31xi32>
      %216 = "math.fpowi"(%49, %215) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>, tensor<21x18x31xi32>) -> tensor<21x18x31xf16>
      %217 = "arith.cmpf"(%88, %101) <{predicate = 12 : i64}> : (f16, f16) -> i1
      %218 = "affine.max"(%87, %87, %33, %87) <{map = affine_map<(d0, d1, d2, d3) -> (d0 mod 4)>}> : (index, index, index, index) -> index
      %219 = "tensor.from_elements"(%10, %10, %103, %12, %10, %6, %119, %123, %106, %6, %114, %103, %123, %11, %6, %103, %81, %103, %103, %11, %124, %81, %81, %10, %114, %124, %109, %6, %81, %119, %124) : (i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1) -> tensor<31xi1>
      %220 = "index.shru"(%118, %40) : (index, index) -> index
      "scf.yield"(%4) : (i64) -> ()
    }) : (i1) -> i64
    %126 = "vector.load"(%68, %16, %16, %16) : (memref<?x?x?xi32>, index, index, index) -> vector<31xi32>
    %127 = "spirv.FUnordLessThanEqual"(%88, %110) : (f16, f16) -> i1
    %128 = "arith.ori"(%3, %8) : (i16, i16) -> i16
    %129 = "spirv.BitwiseXor"(%85, %85) : (vector<2xi32>, vector<2xi32>) -> vector<2xi32>
    %130 = "vector.flat_transpose"(%85) <{columns = 1 : i32, rows = 2 : i32}> : (vector<2xi32>) -> vector<2xi32>
    %131 = "math.tan"(%56) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
    %132 = "spirv.CL.rsqrt"(%104) : (f16) -> f16
    %133 = "index.divu"(%34, %44) : (index, index) -> index
    "memref.assume_alignment"(%67) <{alignment = 16 : i32}> : (memref<28xf32>) -> ()
    %134 = "spirv.CL.fmax"(%82, %80) : (f16, f16) -> f16
    %135 = "spirv.GL.SClamp"(%4, %125, %4) : (i64, i64, i64) -> i64
    %136 = "spirv.SGreaterThan"(%130, %130) : (vector<2xi32>, vector<2xi32>) -> vector<2xi1>
    %137 = "arith.remf"(%2, %2) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
    %138 = "spirv.GL.Tanh"(%88) : (f16) -> f16
    %139 = "tensor.cast"(%59) : (tensor<31x28x28xf32>) -> tensor<?x?x?xf32>
    %140 = "math.tan"(%82) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
    %141 = "spirv.BitwiseXor"(%85, %130) : (vector<2xi32>, vector<2xi32>) -> vector<2xi32>
    %142 = "linalg.transpose"(%61, %61) <{permutation = array<i64: 0>}> ({
    ^bb0(%arg0: i64, %arg1: i64):
      "linalg.yield"(%arg0) : (i64) -> ()
    }) : (tensor<31xi64>, tensor<31xi64>) -> tensor<31xi64>
    %143 = "arith.divf"(%138, %88) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
    %144 = "index.ceildivs"(%37, %87) : (index, index) -> index
    %145 = "spirv.GL.Fma"(%122, %101, %14) : (f16, f16, f16) -> f16
    %146 = "spirv.CL.erf"(%88) : (f16) -> f16
    %147 = "memref.cast"(%76) : (memref<?x?x?xi16>) -> memref<28x31x28xi16>
    %148 = "spirv.IsNan"(%104) : (f16) -> i1
    %149 = "spirv.CL.s_min"(%135, %7) : (i64, i64) -> i64
    %150 = "spirv.CL.log"(%112) : (f16) -> f16
    %151 = "spirv.GL.FMix"(%134, %14, %88) : (f16, f16, f16) -> f16
    %152 = "vector.insertelement"(%15, %126, %20) : (i32, vector<31xi32>, index) -> vector<31xi32>
    %153 = "vector.shuffle"(%126, %130) <{mask = [0, 1, 4, 5, 6, 8, 10, 20, 21, 22, 24, 25, 28, 29, 30, 32]}> : (vector<31xi32>, vector<2xi32>) -> vector<16xi32>
    %154 = "math.round"(%50) <{fastmath = #arith.fastmath<none>}> : (tensor<?xf32>) -> tensor<?xf32>
    %155 = "affine.for"(%106) <{lowerBoundMap = affine_map<() -> (0)>, operandSegmentSizes = array<i32: 0, 0, 1>, step = 1 : index, upperBoundMap = affine_map<() -> (66)>}> ({
    ^bb0(%arg0: index, %arg1: i1):
      "affine.yield"(%arg1) : (i1) -> ()
    }) : (i1) -> i1
    %156 = "affine.if"(%40, %20) ({
      %212 = "tensor.empty"() : () -> tensor<21x18x31x1xi32>
      %213 = "math.fpowi"(%121, %212) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31x1xf16>, tensor<21x18x31x1xi32>) -> tensor<21x18x31x1xf16>
      %214 = "arith.constant"() <{value = 426906223 : i32}> : () -> i32
      %215 = "affine.min"(%21, %47, %41, %38, %30) <{map = affine_map<(d0, d1, d2, d3)[s0] -> (d2 + 14)>}> : (index, index, index, index, index) -> index
      %216 = "math.log"(%58) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?x?xf16>) -> tensor<?x?x?xf16>
      %217 = "affine.max"(%19, %29, %43, %39, %40) <{map = affine_map<(d0, d1, d2, d3)[s0] -> (d0 + 56)>}> : (index, index, index, index, index) -> index
      %218 = "index.divu"(%46, %47) : (index, index) -> index
      %219 = "arith.addi"(%4, %4) : (i64, i64) -> i64
      %220 = "arith.constant"() <{value = 1.07798118E+9 : f32}> : () -> f32
      %221 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<21x18x31xi1>
      "affine.yield"(%221) : (memref<21x18x31xi1>) -> ()
    }, {
      %212 = "index.bool.constant"() <{value = true}> : () -> i1
      %213 = "vector.multi_reduction"(%85, %0) <{kind = #vector.kind<maxsi>, reduction_dims = [0]}> : (vector<2xi32>, i32) -> i32
      %214 = "tensor.cast"(%59) : (tensor<31x28x28xf32>) -> tensor<?x?x?xf32>
      %215 = "arith.subi"(%127, %13) : (i1, i1) -> i1
      "affine.store"(%213, %64, %36) <{map = affine_map<(d0) -> (d0)>}> : (i32, memref<?xi32>, index) -> ()
      %216 = "bufferization.clone"(%67) : (memref<28xf32>) -> memref<28xf32>
      %217 = "arith.minui"(%5, %8) : (i16, i16) -> i16
      %218 = "math.expm1"(%52) <{fastmath = #arith.fastmath<none>}> : (tensor<31xf32>) -> tensor<31xf32>
      %219 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<21x18x31xi1>
      "affine.yield"(%219) : (memref<21x18x31xi1>) -> ()
    }) {condition = affine_set<(d0, d1) : (-d0 >= 0, d0 == 0)>} : (index, index) -> memref<21x18x31xi1>
    %157 = "affine.vector_load"(%71, %31) <{map = affine_map<(d0) -> (d0)>}> : (memref<?xi16>, index) -> vector<18xi16>
    %158 = "math.atan"(%58) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?x?xf16>) -> tensor<?x?x?xf16>
    %159 = "math.cos"(%58) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?x?xf16>) -> tensor<?x?x?xf16>
    %160 = "spirv.CL.s_max"(%9, %7) : (i64, i64) -> i64
    %161 = "spirv.GL.SAbs"(%8) : (i16) -> i16
    %162 = "arith.cmpf"(%120, %101) <{predicate = 11 : i64}> : (f16, f16) -> i1
    %163 = "spirv.CL.floor"(%2) : (f16) -> f16
    %164 = "index.or"(%36, %22) : (index, index) -> index
    %165 = "arith.divsi"(%125, %135) : (i64, i64) -> i64
    %166 = "memref.realloc"(%77) : (memref<?xi64>) -> memref<31xi64>
    %167 = "math.exp2"(%84) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
    %168 = "spirv.CL.fmax"(%84, %93) : (f16, f16) -> f16
    %169 = "spirv.LogicalNotEqual"(%127, %114) : (i1, i1) -> i1
    %170 = "spirv.UGreaterThan"(%0, %0) : (i32, i32) -> i1
    %171 = "index.sizeof"() : () -> index
    %172 = "spirv.UGreaterThanEqual"(%0, %15) : (i32, i32) -> i1
    %173 = "index.mul"(%21, %41) : (index, index) -> index
    %174 = "spirv.GL.Sinh"(%163) : (f16) -> f16
    %175 = "math.ceil"(%59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
    %176 = "spirv.CL.exp"(%134) : (f16) -> f16
    %177 = "math.roundeven"(%88) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
    %178 = "scf.while"(%51) ({
    ^bb0(%arg0: tensor<?xi64>):
      %212 = "math.ipowi"(%3, %102) : (i16, i16) -> i16
      %213 = "arith.divsi"(%12, %106) : (i1, i1) -> i1
      %214 = "bufferization.clone"(%70) : (memref<31x28x28xi1>) -> memref<31x28x28xi1>
      %215 = "memref.alloca_scope"() ({
        %224 = "vector.extract"(%85) <{static_position = array<i64: 0>}> : (vector<2xi32>) -> i32
        %225 = "math.floor"(%100) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %226 = "arith.addi"(%11, %123) : (i1, i1) -> i1
        %227 = "vector.bitcast"(%157) : (vector<18xi16>) -> vector<18xf16>
        %228 = "vector.contract"(%126, %126, %0) <{indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> ()>], iterator_types = [#vector.iterator_type<reduction>], kind = #vector.kind<or>}> : (vector<31xi32>, vector<31xi32>, i32) -> i32
        %229 = "vector.broadcast"(%12) : (i1) -> vector<2xi1>
        %230 = "vector.mask"(%229) ({
          %259 = "vector.multi_reduction"(%130, %85) <{kind = #vector.kind<and>, reduction_dims = []}> : (vector<2xi32>, vector<2xi32>) -> vector<2xi32>
          "vector.yield"(%259) : (vector<2xi32>) -> ()
        }) : (vector<2xi1>) -> vector<2xi32>
        %231 = "arith.remf"(%100, %174) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %232 = "tensor.collapse_shape"(%58) <{reassociation = [[0, 1], [2]]}> : (tensor<?x?x?xf16>) -> tensor<?x?xf16>
        %233 = "vector.flat_transpose"(%85) <{columns = 1 : i32, rows = 2 : i32}> : (vector<2xi32>) -> vector<2xi32>
        %234 = "affine.vector_load"(%77, %144) <{map = affine_map<(d0) -> (d0)>}> : (memref<?xi64>, index) -> vector<21xi64>
        %235 = "vector.broadcast"(%96) : (f16) -> vector<28xf16>
        %236 = "vector.broadcast"(%172) : (i1) -> vector<28xi1>
        %237 = "vector.maskedload"(%69, %16, %16, %16, %236, %235) : (memref<?x?x?xf16>, index, index, index, vector<28xi1>, vector<28xf16>) -> vector<28xf16>
        %238 = "memref.alloca"(%20) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
        %239 = "math.cos"(%168) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %240 = "memref.atomic_rmw"(%15, %64, %16) <{kind = 11 : i64}> : (i32, memref<?xi32>, index) -> i32
        %241 = "math.log10"(%59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
        %242 = "math.ctpop"(%81) : (i1) -> i1
        %243 = "arith.shrui"(%119, %10) : (i1, i1) -> i1
        %244 = "affine.vector_load"(%68, %38, %118, %33) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (memref<?x?x?xi32>, index, index, index) -> vector<28xi32>
        %245 = "index.add"(%35, %26) : (index, index) -> index
        %246 = "memref.alloc"(%17) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi1>
        %247 = "math.log10"(%98) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %248 = "math.absi"(%53) : (tensor<?xi64>) -> tensor<?xi64>
        %249 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<21x18x31xi64>
        "memref.tensor_store"(%48, %249) : (tensor<21x18x31xi64>, memref<21x18x31xi64>) -> ()
        "affine.store"(%0, %79, %18, %38, %25) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (i32, memref<?x?x28xi32>, index, index, index) -> ()
        %250 = "arith.remf"(%168, %83) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %251 = "index.bool.constant"() <{value = true}> : () -> i1
        %252 = "vector.splat"(%164) : (index) -> vector<31xindex>
        %253 = "vector.load"(%71, %16) : (memref<?xi16>, index) -> vector<21x18x31xi16>
        %254 = "math.ctlz"(%51) : (tensor<?xi64>) -> tensor<?xi64>
        %255 = "vector.insertelement"(%135, %234, %36) : (i64, vector<21xi64>, index) -> vector<21xi64>
        %256 = "math.atan"(%59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
        %257 = "linalg.transpose"(%62, %62) <{permutation = array<i64: 0>}> ({
        ^bb0(%arg1: i16, %arg2: i16):
          "linalg.yield"(%arg1) : (i16) -> ()
        }) : (tensor<31xi16>, tensor<31xi16>) -> tensor<31xi16>
        %258 = "tensor.empty"(%36) : (index) -> tensor<?xf16>
        "memref.alloca_scope.return"(%258) : (tensor<?xf16>) -> ()
      }) : () -> tensor<?xf16>
      %216 = "memref.alloca"(%47) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi16>
      %217 = "math.exp2"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
      %218 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<18x31xi16>
      %219 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x21xi16>
      %220 = "tensor.empty"() : () -> tensor<18x21xi16>
      %221 = "linalg.matmul"(%218, %219, %220) <{operandSegmentSizes = array<i32: 2, 1>}> ({
      ^bb0(%arg1: i16, %arg2: i16, %arg3: i16):
        %224 = "arith.muli"(%arg1, %arg2) : (i16, i16) -> i16
        %225 = "arith.addi"(%arg3, %224) : (i16, i16) -> i16
        "linalg.yield"(%225) : (i16) -> ()
      }) {linalg.memoized_indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d2)>, affine_map<(d0, d1, d2) -> (d2, d1)>, affine_map<(d0, d1, d2) -> (d0, d1)>]} : (memref<18x31xi16>, memref<31x21xi16>, tensor<18x21xi16>) -> tensor<18x21xi16>
      %222 = "vector.multi_reduction"(%130, %85) <{kind = #vector.kind<xor>, reduction_dims = []}> : (vector<2xi32>, vector<2xi32>) -> vector<2xi32>
      %223 = "tensor.empty"(%20) : (index) -> tensor<?xi64>
      "scf.condition"(%114, %223) : (i1, tensor<?xi64>) -> ()
    }, {
    ^bb0(%arg0: tensor<?xi64>):
      "vector.print"(%130) <{punctuation = #vector.punctuation<newline>}> : (vector<2xi32>) -> ()
      %212 = "vector.extract_strided_slice"(%130) <{offsets = [0], sizes = [2], strides = [1]}> : (vector<2xi32>) -> vector<2xi32>
      "memref.alloca_scope"() ({
        %228 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
        %229 = "vector.broadcast"(%228) : (f32) -> vector<21x18x31xf32>
        %230 = "vector.fma"(%229, %229, %229) : (vector<21x18x31xf32>, vector<21x18x31xf32>, vector<21x18x31xf32>) -> vector<21x18x31xf32>
        %231 = "math.ctlz"(%142) : (tensor<31xi64>) -> tensor<31xi64>
        "memref.store"(%160, %77, %16) <{nontemporal = false}> : (i64, memref<?xi64>, index) -> ()
        "vector.print"(%230) <{punctuation = #vector.punctuation<newline>}> : (vector<21x18x31xf32>) -> ()
        %232 = "arith.cmpf"(%168, %146) <{predicate = 10 : i64}> : (f16, f16) -> i1
        %233 = "arith.muli"(%9, %7) : (i64, i64) -> i64
        %234 = "vector.broadcast"(%228) : (f32) -> vector<18x31xf32>
        %235 = "vector.multi_reduction"(%229, %234) <{kind = #vector.kind<minf>, reduction_dims = [0]}> : (vector<21x18x31xf32>, vector<18x31xf32>) -> vector<18x31xf32>
        %236 = "vector.load"(%67, %31) : (memref<28xf32>, index) -> vector<31x28x28xf32>
        %237 = "math.log"(%56) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
        %238 = "arith.muli"(%11, %123) : (i1, i1) -> i1
        %239 = "math.tanh"(%98) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        "affine.vector_store"(%212, %64, %20) <{map = affine_map<(d0) -> (d0)>}> : (vector<2xi32>, memref<?xi32>, index) -> ()
        %240 = "math.ctpop"(%60) : (tensor<?x?x31xi1>) -> tensor<?x?x31xi1>
        %241 = "index.ceildivs"(%42, %87) : (index, index) -> index
        %242 = "arith.divf"(%145, %134) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %243 = "arith.constant"() <{value = 8675 : i16}> : () -> i16
        %244 = "math.fpowi"(%2, %0) <{fastmath = #arith.fastmath<none>}> : (f16, i32) -> f16
        %245 = "math.log"(%83) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %246 = "math.absi"(%142) : (tensor<31xi64>) -> tensor<31xi64>
        %247 = "tensor.expand_shape"(%60) <{reassociation = [[0], [1], [2, 3]]}> : (tensor<?x?x31xi1>) -> tensor<?x?x31x1xi1>
        %248 = "math.copysign"(%151, %168) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %249 = "arith.xori"(%109, %103) : (i1, i1) -> i1
        %250 = "tensor.splat"(%106) : (i1) -> tensor<28xi1>
        %251 = "arith.negf"(%174) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %252 = "math.expm1"(%101) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %253 = "arith.shrui"(%119, %106) : (i1, i1) -> i1
        %254 = "vector.broadcast"(%228) : (f32) -> vector<31x28xf32>
        %255 = "vector.multi_reduction"(%236, %254) <{kind = #vector.kind<maxf>, reduction_dims = [1]}> : (vector<31x28x28xf32>, vector<31x28xf32>) -> vector<31x28xf32>
        "affine.vector_store"(%126, %73, %28) <{map = affine_map<(d0) -> (d0)>}> : (vector<31xi32>, memref<?xi32>, index) -> ()
        %256 = "affine.min"(%173, %41, %35) <{map = affine_map<(d0, d1, d2) -> (d2 + 64)>}> : (index, index, index) -> index
        %257 = "tensor.collapse_shape"(%56) <{reassociation = [[0, 1], [2]]}> : (tensor<21x18x31xf16>) -> tensor<378x31xf16>
        %258 = "arith.muli"(%5, %1) : (i16, i16) -> i16
        %259 = "math.log"(%84) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        "memref.alloca_scope.return"() : () -> ()
      }) : () -> ()
      %213 = "index.ceildivu"(%27, %26) : (index, index) -> index
      %214 = "arith.remf"(%150, %89) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %215 = "math.roundeven"(%122) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %216 = "tensor.insert"(%9, %arg0, %16) : (i64, tensor<?xi64>, index) -> tensor<?xi64>
      %217 = "math.rsqrt"(%56) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
      %218 = "vector.broadcast"(%15) : (i32) -> vector<2x2xi32>
      %219 = "vector.outerproduct"(%212, %212, %218) <{kind = #vector.kind<maxsi>}> : (vector<2xi32>, vector<2xi32>, vector<2x2xi32>) -> vector<2x2xi32>
      %220 = "arith.remf"(%145, %98) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %221 = "math.cttz"(%161) : (i16) -> i16
      %222 = "index.divs"(%37, %213) : (index, index) -> index
      %223 = "linalg.copy"(%63, %63) <{operandSegmentSizes = array<i32: 1, 1>}> ({
      ^bb0(%arg1: i1, %arg2: i1):
        "linalg.yield"(%arg1) : (i1) -> ()
      }) : (tensor<?xi1>, tensor<?xi1>) -> tensor<?xi1>
      %224 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<21x18x31xf32>
      %225 = "math.log10"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
      %226 = "index.add"(%164, %40) : (index, index) -> index
      %227 = "tensor.empty"(%22) : (index) -> tensor<?xi64>
      "scf.yield"(%227) : (tensor<?xi64>) -> ()
    }) : (tensor<?xi64>) -> tensor<?xi64>
    %179 = "arith.remui"(%172, %12) : (i1, i1) -> i1
    %180 = "spirv.CL.pow"(%96, %163) : (f16, f16) -> f16
    %181 = "math.ipowi"(%48, %48) : (tensor<21x18x31xi64>, tensor<21x18x31xi64>) -> tensor<21x18x31xi64>
    %182 = "spirv.CL.rint"(%146) : (f16) -> f16
    %183 = "vector.transpose"(%126) <{transp = [0]}> : (vector<31xi32>) -> vector<31xi32>
    %184 = "index.divu"(%25, %87) : (index, index) -> index
    %185 = "affine.if"(%20, %26, %44, %25) ({
      %212 = "memref.atomic_rmw"(%3, %71, %16) <{kind = 4 : i64}> : (i16, memref<?xi16>, index) -> i16
      %213 = "vector.contract"(%130, %85, %0) <{indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> ()>], iterator_types = [#vector.iterator_type<reduction>], kind = #vector.kind<minui>}> : (vector<2xi32>, vector<2xi32>, i32) -> i32
      %214 = "index.floordivs"(%36, %37) : (index, index) -> index
      %215 = "index.mul"(%37, %45) : (index, index) -> index
      %216 = "memref.realloc"(%78) : (memref<?xf16>) -> memref<28xf16>
      %217 = "math.copysign"(%14, %96) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      "affine.vector_store"(%157, %71, %21) <{map = affine_map<(d0) -> (d0)>}> : (vector<18xi16>, memref<?xi16>, index) -> ()
      %218 = "vector.broadcast"(%13) : (i1) -> vector<21x31xi1>
      %219 = "vector.broadcast"(%148) : (i1) -> vector<21xi1>
      %220:2 = "vector.scan"(%218, %219) <{inclusive = true, kind = #vector.kind<minui>, reduction_dim = 1 : i64}> : (vector<21x31xi1>, vector<21xi1>) -> (vector<21x31xi1>, vector<21xi1>)
      "affine.yield"(%182) : (f16) -> ()
    }, {
      %212 = "tensor.generate"(%35) ({
      ^bb0(%arg0: index, %arg1: index, %arg2: index):
        %221 = "tensor.splat"(%110) : (f16) -> tensor<31xf16>
        %222 = "math.log2"(%110) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %223 = "math.atan"(%145) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %224 = "math.round"(%139) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
        "tensor.yield"(%2) : (f16) -> ()
      }) : (index) -> tensor<?x28x28xf16>
      %213 = "arith.addi"(%108, %5) : (i16, i16) -> i16
      %214 = "vector.broadcast"(%15) : (i32) -> vector<31x31xi32>
      %215 = "vector.outerproduct"(%126, %126, %214) <{kind = #vector.kind<minui>}> : (vector<31xi32>, vector<31xi32>, vector<31x31xi32>) -> vector<31x31xi32>
      %216 = "arith.addi"(%169, %81) : (i1, i1) -> i1
      %217 = "index.add"(%40, %144) : (index, index) -> index
      %218 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31xi64>
      "memref.tensor_store"(%61, %218) : (tensor<31xi64>, memref<31xi64>) -> ()
      %219 = "math.round"(%138) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %220 = "arith.divf"(%104, %83) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      "affine.yield"(%89) : (f16) -> ()
    }) {condition = affine_set<(d0, d1, d2, d3) : ((d1 + d3) mod 2 - d0 - 2 == 0, (d1 + d3) mod 2 - d0 - 2 == 0)>} : (index, index, index, index) -> f16
    %186 = "tensor.expand_shape"(%52) <{reassociation = [[0, 1]]}> : (tensor<31xf32>) -> tensor<31x1xf32>
    %187 = "spirv.CL.rsqrt"(%163) : (f16) -> f16
    %188 = "scf.parallel"(%40, %164, %45, %149) <{operandSegmentSizes = array<i32: 1, 1, 1, 1>}> ({
    ^bb0(%arg0: index):
      %212 = "arith.remui"(%148, %11) : (i1, i1) -> i1
      %213 = "index.floordivs"(%133, %44) : (index, index) -> index
      %214 = "tensor.splat"(%109) : (i1) -> tensor<21x18x31xi1>
      %215 = "scf.parallel"(%21, %25, %164, %36, %37, %46, %112) <{operandSegmentSizes = array<i32: 2, 2, 2, 1>}> ({
      ^bb0(%arg1: index, %arg2: index):
        %228 = "bufferization.clone"(%72) : (memref<31xi16>) -> memref<31xi16>
        %229 = "tensor.splat"(%98) : (f16) -> tensor<31x28x28xf16>
        %230 = "vector.broadcast"(%169) : (i1) -> vector<31xi1>
        %231 = "vector.mask"(%230) ({
          %244 = "vector.multi_reduction"(%126, %126) <{kind = #vector.kind<add>, reduction_dims = []}> : (vector<31xi32>, vector<31xi32>) -> vector<31xi32>
          "vector.yield"(%244) : (vector<31xi32>) -> ()
        }) : (vector<31xi1>) -> vector<31xi32>
        "affine.store"(%127, %74, %17, %45, %46) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (i1, memref<31x28x28xi1>, index, index, index) -> ()
        %232 = "index.bool.constant"() <{value = false}> : () -> i1
        %233 = "arith.remf"(%176, %2) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %234 = "arith.minui"(%103, %148) : (i1, i1) -> i1
        %235 = "math.cttz"(%81) : (i1) -> i1
        %236 = "index.or"(%39, %33) : (index, index) -> index
        %237 = "arith.cmpi"(%125, %149) <{predicate = 0 : i64}> : (i64, i64) -> i1
        %238 = "vector.load"(%69, %16, %16, %16) : (memref<?x?x?xf16>, index, index, index) -> vector<21x18x31xf16>
        %239 = "index.bool.constant"() <{value = false}> : () -> i1
        %240 = "arith.ori"(%3, %5) : (i16, i16) -> i16
        %241 = "math.copysign"(%80, %151) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %242 = "arith.constant"() <{value = 2.227200e+04 : f16}> : () -> f16
        %243 = "vector.bitcast"(%130) : (vector<2xi32>) -> vector<2xi32>
        "scf.reduce"(%134) ({
        ^bb0(%arg3: f16, %arg4: f16):
          %244 = "math.fpowi"(%88, %15) <{fastmath = #arith.fastmath<none>}> : (f16, i32) -> f16
          %245 = "tensor.rank"(%59) : (tensor<31x28x28xf32>) -> index
          %246 = "memref.atomic_rmw"(%5, %76, %16, %16, %16) <{kind = 8 : i64}> : (i16, memref<?x?x?xi16>, index, index, index) -> i16
          %247 = "bufferization.to_tensor"(%78) : (memref<?xf16>) -> tensor<?xf16>
          %248 = "tensor.collapse_shape"(%60) <{reassociation = [[0, 1], [2]]}> : (tensor<?x?x31xi1>) -> tensor<?x31xi1>
          %249 = "affine.max"(%245, %35, %29) <{map = affine_map<(d0, d1, d2) -> (-d0)>}> : (index, index, index) -> index
          %250 = "arith.cmpi"(%3, %3) <{predicate = 5 : i64}> : (i16, i16) -> i1
          %251 = "vector.multi_reduction"(%130, %0) <{kind = #vector.kind<add>, reduction_dims = [0]}> : (vector<2xi32>, i32) -> i32
          "scf.reduce.return"(%134) : (f16) -> ()
        }) : (f16) -> ()
        "scf.yield"() : () -> ()
      }) : (index, index, index, index, index, index, f16) -> f16
      %216 = "math.rsqrt"(%187) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %217 = "arith.constant"() <{value = 0 : i64}> : () -> i64
      %218 = "vector.transfer_read"(%48, %45, %29, %21, %217) <{operandSegmentSizes = array<i32: 1, 3, 1, 0>, permutation_map = affine_map<(d0, d1, d2) -> ()>}> : (tensor<21x18x31xi64>, index, index, index, i64) -> vector<i64>
      %219 = "vector.reduction"(%85) <{fastmath = #arith.fastmath<none>, kind = #vector.kind<or>}> : (vector<2xi32>) -> i32
      %220 = "tensor.expand_shape"(%62) <{reassociation = [[0, 1]]}> : (tensor<31xi16>) -> tensor<31x1xi16>
      %221 = "math.tanh"(%138) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %222 = "math.log"(%100) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %223 = "linalg.transpose"(%55, %55) <{permutation = array<i64: 2, 0, 1>}> ({
      ^bb0(%arg1: i64, %arg2: i64):
        "linalg.yield"(%arg1) : (i64) -> ()
      }) : (tensor<?x?x?xi64>, tensor<?x?x?xi64>) -> tensor<?x?x?xi64>
      %224 = "affine.vector_load"(%72, %23) <{map = affine_map<(d0) -> (d0)>}> : (memref<31xi16>, index) -> vector<28xi16>
      %225 = "tensor.dim"(%223, %16) : (tensor<?x?x?xi64>, index) -> index
      %226 = "vector.contract"(%224, %224, %102) <{indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> ()>], iterator_types = [#vector.iterator_type<reduction>], kind = #vector.kind<xor>}> : (vector<28xi16>, vector<28xi16>, i16) -> i16
      "scf.parallel"(%17, %25, %213, %35, %28, %39) <{operandSegmentSizes = array<i32: 2, 2, 2, 0>}> ({
      ^bb0(%arg1: index, %arg2: index):
        %228 = "memref.cast"(%64) : (memref<?xi32>) -> memref<31xi32>
        %229 = "math.expm1"(%110) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %230 = "arith.remui"(%102, %108) : (i16, i16) -> i16
        %231 = "arith.muli"(%119, %172) : (i1, i1) -> i1
        %232 = "arith.floordivsi"(%108, %102) : (i16, i16) -> i16
        %233 = "vector.bitcast"(%157) : (vector<18xi16>) -> vector<18xf16>
        "memref.assume_alignment"(%76) <{alignment = 1 : i32}> : (memref<?x?x?xi16>) -> ()
        %234 = "arith.negf"(%138) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %235 = "vector.extract"(%157) <{static_position = array<i64: 2>}> : (vector<18xi16>) -> i16
        %236 = "bufferization.to_tensor"(%74) : (memref<31x28x28xi1>) -> tensor<31x28x28xi1>
        %237 = "math.tan"(%59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
        %238 = "math.exp2"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
        %239 = "math.copysign"(%110, %104) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %240 = "arith.remsi"(%1, %107) : (i16, i16) -> i16
        %241 = "math.ceil"(%187) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %242 = "math.log"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
        "scf.yield"() : () -> ()
      }) : (index, index, index, index, index, index) -> ()
      %227 = "arith.divf"(%83, %138) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      "scf.reduce"(%9) ({
      ^bb0(%arg1: i64, %arg2: i64):
        %228 = "affine.max"(%46, %36) <{map = affine_map<(d0)[s0] -> ((d0 - 128) * 8)>}> : (index, index) -> index
        %229 = "math.ceil"(%58) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?x?xf16>) -> tensor<?x?x?xf16>
        %230 = "vector.multi_reduction"(%126, %15) <{kind = #vector.kind<minui>, reduction_dims = [0]}> : (vector<31xi32>, i32) -> i32
        %231 = "tensor.cast"(%51) : (tensor<?xi64>) -> tensor<18xi64>
        %232 = "math.floor"(%84) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %233 = "index.floordivs"(%144, %225) : (index, index) -> index
        "linalg.transpose"(%51, %77) <{permutation = array<i64: 0>}> ({
        ^bb0(%arg3: i64, %arg4: i64):
          "linalg.yield"(%arg3) : (i64) -> ()
        }) : (tensor<?xi64>, memref<?xi64>) -> ()
        %234 = "arith.subi"(%3, %107) : (i16, i16) -> i16
        "scf.reduce.return"(%160) : (i64) -> ()
      }) : (i64) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index, i64) -> i64
    %189 = "vector.broadcast"(%148) : (i1) -> vector<28xi1>
    "vector.compressstore"(%74, %40, %38, %27, %189, %189) : (memref<31x28x28xi1>, index, index, index, vector<28xi1>, vector<28xi1>) -> ()
    %190 = "spirv.CL.fma"(%180, %101, %187) : (f16, f16, f16) -> f16
    %191 = "vector.contract"(%157, %157, %161) <{indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> ()>], iterator_types = [#vector.iterator_type<reduction>], kind = #vector.kind<add>}> : (vector<18xi16>, vector<18xi16>, i16) -> i16
    %192 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
    %193 = "vector.broadcast"(%192) : (f32) -> vector<18xf32>
    %194 = "vector.transfer_write"(%193, %186, %45, %184) <{operandSegmentSizes = array<i32: 1, 1, 2, 0>, permutation_map = affine_map<(d0, d1) -> (d0)>}> : (vector<18xf32>, tensor<31x1xf32>, index, index) -> tensor<31x1xf32>
    %195 = "spirv.GL.Round"(%96) : (f16) -> f16
    %196 = "arith.remui"(%7, %4) : (i64, i64) -> i64
    %197 = "tensor.empty"() : () -> tensor<31x28x28xi16>
    %198 = "spirv.GL.InverseSqrt"(%104) : (f16) -> f16
    %199 = "spirv.GL.Pow"(%195, %195) : (f16, f16) -> f16
    %200 = "memref.load"(%71, %16) <{nontemporal = false}> : (memref<?xi16>, index) -> i16
    %201 = "spirv.GL.SAbs"(%102) : (i16) -> i16
    %202 = "bufferization.clone"(%66) : (memref<31x28x28xi1>) -> memref<31x28x28xi1>
    %203 = "affine.vector_load"(%70, %41, %42, %34) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (memref<31x28x28xi1>, index, index, index) -> vector<28xi1>
    %204 = "arith.remf"(%98, %93) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
    %205 = "math.exp"(%121) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31x1xf16>) -> tensor<21x18x31x1xf16>
    %206 = "tensor.empty"() : () -> tensor<31x28x28x18xi1>
    %207 = "linalg.broadcast"(%74, %206) <{dimensions = array<i64: 3>}> ({
    ^bb0(%arg0: i1, %arg1: i1):
      "linalg.yield"(%arg0) : (i1) -> ()
    }) : (memref<31x28x28xi1>, tensor<31x28x28x18xi1>) -> tensor<31x28x28x18xi1>
    %208 = "spirv.CL.round"(%187) : (f16) -> f16
    %209 = "spirv.LogicalOr"(%109, %103) : (i1, i1) -> i1
    %210 = "spirv.GL.FMix"(%199, %146, %101) : (f16, f16, f16) -> f16
    %211 = "spirv.CL.fma"(%14, %146, %2) : (f16, f16, f16) -> f16
    "vector.print"(%85) <{punctuation = #vector.punctuation<newline>}> : (vector<2xi32>) -> ()
    "vector.print"(%126) <{punctuation = #vector.punctuation<newline>}> : (vector<31xi32>) -> ()
    "vector.print"(%130) <{punctuation = #vector.punctuation<newline>}> : (vector<2xi32>) -> ()
    "vector.print"(%157) <{punctuation = #vector.punctuation<newline>}> : (vector<18xi16>) -> ()
    "vector.print"(%193) <{punctuation = #vector.punctuation<newline>}> : (vector<18xf32>) -> ()
    "vector.print"(%203) <{punctuation = #vector.punctuation<newline>}> : (vector<28xi1>) -> ()
    "vector.print"(%0) <{punctuation = #vector.punctuation<newline>}> : (i32) -> ()
    "vector.print"(%1) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%2) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%3) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%4) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%5) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%6) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%7) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%8) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%9) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%10) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%11) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%12) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%13) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%14) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%15) <{punctuation = #vector.punctuation<newline>}> : (i32) -> ()
    "vector.print"(%80) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%81) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%82) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%83) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%84) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%88) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%89) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%93) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%96) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%98) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%100) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%101) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%102) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%103) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%104) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%106) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%107) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%108) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%109) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%110) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%112) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%114) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%119) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%120) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%122) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%123) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%124) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%125) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%127) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%132) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%134) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%135) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%138) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%145) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%146) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%148) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%149) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%150) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%151) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%160) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%161) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%163) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%168) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%169) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%170) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%172) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%174) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%176) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%180) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%182) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%187) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%190) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%192) <{punctuation = #vector.punctuation<newline>}> : (f32) -> ()
    "vector.print"(%195) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%198) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%199) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%201) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%208) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%209) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%210) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%211) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
  "func.func"() <{function_type = (vector<31xf32>, index) -> (), sym_name = "func2", sym_visibility = "nested"}> ({
  ^bb0(%arg0: vector<31xf32>, %arg1: index):
    %0 = "arith.constant"() <{value = 2025407758 : i32}> : () -> i32
    %1 = "arith.constant"() <{value = -19558 : i16}> : () -> i16
    %2 = "arith.constant"() <{value = 3.244800e+04 : f16}> : () -> f16
    %3 = "arith.constant"() <{value = -29205 : i16}> : () -> i16
    %4 = "arith.constant"() <{value = 820853008 : i64}> : () -> i64
    %5 = "arith.constant"() <{value = -25848 : i16}> : () -> i16
    %6 = "arith.constant"() <{value = false}> : () -> i1
    %7 = "arith.constant"() <{value = 1183307392 : i64}> : () -> i64
    %8 = "arith.constant"() <{value = 15330 : i16}> : () -> i16
    %9 = "arith.constant"() <{value = 482292773 : i64}> : () -> i64
    %10 = "arith.constant"() <{value = false}> : () -> i1
    %11 = "arith.constant"() <{value = true}> : () -> i1
    %12 = "arith.constant"() <{value = true}> : () -> i1
    %13 = "arith.constant"() <{value = false}> : () -> i1
    %14 = "arith.constant"() <{value = 1.491200e+04 : f16}> : () -> f16
    %15 = "arith.constant"() <{value = 585568192 : i32}> : () -> i32
    %16 = "arith.constant"() <{value = 0 : index}> : () -> index
    %17 = "arith.constant"() <{value = 1 : index}> : () -> index
    %18 = "arith.constant"() <{value = 2 : index}> : () -> index
    %19 = "arith.constant"() <{value = 3 : index}> : () -> index
    %20 = "arith.constant"() <{value = 4 : index}> : () -> index
    %21 = "arith.constant"() <{value = 5 : index}> : () -> index
    %22 = "arith.constant"() <{value = 6 : index}> : () -> index
    %23 = "arith.constant"() <{value = 7 : index}> : () -> index
    %24 = "arith.constant"() <{value = 8 : index}> : () -> index
    %25 = "arith.constant"() <{value = 9 : index}> : () -> index
    %26 = "arith.constant"() <{value = 10 : index}> : () -> index
    %27 = "arith.constant"() <{value = 11 : index}> : () -> index
    %28 = "arith.constant"() <{value = 12 : index}> : () -> index
    %29 = "arith.constant"() <{value = 13 : index}> : () -> index
    %30 = "arith.constant"() <{value = 14 : index}> : () -> index
    %31 = "arith.constant"() <{value = 15 : index}> : () -> index
    %32 = "arith.constant"() <{value = 16 : index}> : () -> index
    %33 = "arith.constant"() <{value = 17 : index}> : () -> index
    %34 = "arith.constant"() <{value = 18 : index}> : () -> index
    %35 = "arith.constant"() <{value = 19 : index}> : () -> index
    %36 = "arith.constant"() <{value = 20 : index}> : () -> index
    %37 = "arith.constant"() <{value = 21 : index}> : () -> index
    %38 = "arith.constant"() <{value = 22 : index}> : () -> index
    %39 = "arith.constant"() <{value = 23 : index}> : () -> index
    %40 = "arith.constant"() <{value = 24 : index}> : () -> index
    %41 = "arith.constant"() <{value = 25 : index}> : () -> index
    %42 = "arith.constant"() <{value = 26 : index}> : () -> index
    %43 = "arith.constant"() <{value = 27 : index}> : () -> index
    %44 = "arith.constant"() <{value = 28 : index}> : () -> index
    %45 = "arith.constant"() <{value = 29 : index}> : () -> index
    %46 = "arith.constant"() <{value = 30 : index}> : () -> index
    %47 = "arith.constant"() <{value = 31 : index}> : () -> index
    %48 = "tensor.empty"() : () -> tensor<21x18x31xi64>
    %49 = "tensor.empty"() : () -> tensor<21x18x31xf16>
    %50 = "tensor.empty"(%18) : (index) -> tensor<?xf32>
    %51 = "tensor.empty"(%26) : (index) -> tensor<?xi64>
    %52 = "tensor.empty"() : () -> tensor<31xf32>
    %53 = "tensor.empty"(%42) : (index) -> tensor<?xi64>
    %54 = "tensor.empty"() : () -> tensor<31xi1>
    %55 = "tensor.empty"(%18, %24, %33) : (index, index, index) -> tensor<?x?x?xi64>
    %56 = "tensor.empty"() : () -> tensor<21x18x31xf16>
    %57 = "tensor.empty"() : () -> tensor<28xf32>
    %58 = "tensor.empty"(%19, %28, %34) : (index, index, index) -> tensor<?x?x?xf16>
    %59 = "tensor.empty"() : () -> tensor<31x28x28xf32>
    %60 = "tensor.empty"(%38, %28) : (index, index) -> tensor<?x?x31xi1>
    %61 = "tensor.empty"() : () -> tensor<31xi64>
    %62 = "tensor.empty"() : () -> tensor<31xi16>
    %63 = "tensor.empty"(%26) : (index) -> tensor<?xi1>
    %64 = "memref.alloc"(%44) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi32>
    %65 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31xf32>
    %66 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xi1>
    %67 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<28xf32>
    %68 = "memref.alloc"(%43, %28, %44) <{operandSegmentSizes = array<i32: 3, 0>}> : (index, index, index) -> memref<?x?x?xi32>
    %69 = "memref.alloc"(%46, %38, %46) <{operandSegmentSizes = array<i32: 3, 0>}> : (index, index, index) -> memref<?x?x?xf16>
    %70 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xi1>
    %71 = "memref.alloc"(%28) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi16>
    %72 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31xi16>
    %73 = "memref.alloc"(%29) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi32>
    %74 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xi1>
    %75 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xf16>
    %76 = "memref.alloc"(%20, %20, %41) <{operandSegmentSizes = array<i32: 3, 0>}> : (index, index, index) -> memref<?x?x?xi16>
    %77 = "memref.alloc"(%29) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xi64>
    %78 = "memref.alloc"(%22) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?xf16>
    %79 = "memref.alloc"(%30, %35) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?x28xi32>
    %80 = "arith.constant"() <{value = 1.000000e+00 : f32}> : () -> f32
    %81 = "vector.broadcast"(%80) : (f32) -> vector<31xf32>
    %82 = "vector.broadcast"(%11) : (i1) -> vector<31xi1>
    %83 = "vector.broadcast"(%15) : (i32) -> vector<31xi32>
    %84 = "vector.gather"(%57, %24, %83, %82, %81) : (tensor<28xf32>, index, vector<31xi32>, vector<31xi1>, vector<31xf32>) -> vector<31xf32>
    %85 = "math.tan"(%80) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
    %86 = "scf.parallel"(%27, %18, %19, %30, %26, %46, %63) <{operandSegmentSizes = array<i32: 2, 2, 2, 1>}> ({
    ^bb0(%arg2: index, %arg3: index):
      %228 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<21x18x31xi32>
      %229 = "vector.broadcast"(%15) : (i32) -> vector<28xi32>
      %230 = "vector.broadcast"(%6) : (i1) -> vector<28xi1>
      %231 = "vector.gather"(%228, %47, %17, %33, %229, %230, %229) : (memref<21x18x31xi32>, index, index, index, vector<28xi32>, vector<28xi1>, vector<28xi32>) -> vector<28xi32>
      %232 = "index.divu"(%21, %26) : (index, index) -> index
      %233 = "arith.divf"(%80, %80) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
      %234 = "affine.parallel"() <{lowerBoundsGroups = dense<1> : tensor<1xi32>, lowerBoundsMap = affine_map<() -> (0)>, reductions = [11], steps = [1], upperBoundsGroups = dense<1> : tensor<1xi32>, upperBoundsMap = affine_map<() -> (21)>}> ({
      ^bb0(%arg4: index):
        %246 = "tensor.cast"(%56) : (tensor<21x18x31xf16>) -> tensor<?x?x?xf16>
        "affine.yield"(%9) : (i64) -> ()
      }) : () -> memref<21xi64>
      "vector.print"(%229) <{punctuation = #vector.punctuation<newline>}> : (vector<28xi32>) -> ()
      %235 = "math.log10"(%80) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
      %236 = "vector.broadcast"(%5) : (i16) -> vector<31xi16>
      %237 = "vector.maskedload"(%72, %27, %82, %236) : (memref<31xi16>, index, vector<31xi1>, vector<31xi16>) -> vector<31xi16>
      %238 = "vector.bitcast"(%236) : (vector<31xi16>) -> vector<31xf16>
      %239 = "affine.parallel"() <{lowerBoundsGroups = dense<1> : tensor<1xi32>, lowerBoundsMap = affine_map<() -> (0)>, reductions = [9], steps = [1], upperBoundsGroups = dense<1> : tensor<1xi32>, upperBoundsMap = affine_map<() -> (31)>}> ({
      ^bb0(%arg4: index):
        %246 = "vector.load"(%78, %16) : (memref<?xf16>, index) -> vector<28xf16>
        "affine.yield"(%80) : (f32) -> ()
      }) : () -> memref<31xf32>
      %240 = "tensor.cast"(%53) : (tensor<?xi64>) -> tensor<28xi64>
      %241 = "arith.remf"(%14, %2) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %242 = "index.or"(%35, %47) : (index, index) -> index
      %243 = "arith.remf"(%2, %14) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      "vector.print"(%229) <{punctuation = #vector.punctuation<newline>}> : (vector<28xi32>) -> ()
      %244 = "arith.remf"(%14, %2) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %245 = "math.log10"(%58) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?x?xf16>) -> tensor<?x?x?xf16>
      "scf.reduce"(%63) ({
      ^bb0(%arg4: tensor<?xi1>, %arg5: tensor<?xi1>):
        %246 = "affine.vector_load"(%70, %26, %46, %17) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (memref<31x28x28xi1>, index, index, index) -> vector<28xi1>
        %247 = "index.divs"(%arg1, %25) : (index, index) -> index
        %248 = "arith.remf"(%80, %80) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
        %249 = "index.maxs"(%arg1, %17) : (index, index) -> index
        %250 = "math.rsqrt"(%14) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %251 = "memref.cast"(%64) : (memref<?xi32>) -> memref<21xi32>
        "vector.compressstore"(%72, %37, %82, %237) : (memref<31xi16>, index, vector<31xi1>, vector<31xi16>) -> ()
        %252 = "math.log"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
        "scf.reduce.return"(%63) : (tensor<?xi1>) -> ()
      }) : (tensor<?xi1>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index, index, index, index, tensor<?xi1>) -> tensor<?xi1>
    %87 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xi16>
    %88 = "vector.broadcast"(%1) : (i16) -> vector<31xi16>
    %89 = "vector.gather"(%87, %31, %22, %17, %83, %82, %88) : (memref<31x28x28xi16>, index, index, index, vector<31xi32>, vector<31xi1>, vector<31xi16>) -> vector<31xi16>
    %90 = "spirv.CL.fabs"(%14) : (f16) -> f16
    %91 = "math.atan"(%14) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
    %92 = "spirv.GL.SClamp"(%9, %7, %9) : (i64, i64, i64) -> i64
    %93 = "arith.xori"(%6, %11) : (i1, i1) -> i1
    %94 = "math.log10"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
    %95 = "spirv.CL.log"(%2) : (f16) -> f16
    %96 = "tensor.collapse_shape"(%58) <{reassociation = [[0, 1], [2]]}> : (tensor<?x?x?xf16>) -> tensor<?x?xf16>
    %97 = "tensor.expand_shape"(%60) <{reassociation = [[0], [1], [2, 3]]}> : (tensor<?x?x31xi1>) -> tensor<?x?x31x1xi1>
    %98 = "spirv.CL.tanh"(%95) : (f16) -> f16
    %99 = "spirv.LogicalNot"(%10) : (i1) -> i1
    %100 = "spirv.CL.fmin"(%2, %95) : (f16, f16) -> f16
    %101 = "math.log10"(%90) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
    "scf.index_switch"(%16) <{cases = array<i64: 1, 2, 3>}> ({
      %228 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xi16>
      %229 = "tensor.collapse_shape"(%49) <{reassociation = [[0, 1], [2]]}> : (tensor<21x18x31xf16>) -> tensor<378x31xf16>
      %230 = "vector.splat"(%43) : (index) -> vector<21x18x31xindex>
      %231 = "math.expm1"(%90) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %232 = "arith.shrui"(%11, %12) : (i1, i1) -> i1
      %233 = "affine.min"(%34, %23, %17) <{map = affine_map<(d0, d1, d2) -> (-d0)>}> : (index, index, index) -> index
      %234 = "math.roundeven"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
      %235 = "math.cttz"(%51) : (tensor<?xi64>) -> tensor<?xi64>
      %236 = "index.sizeof"() : () -> index
      %237 = "math.ceil"(%58) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?x?xf16>) -> tensor<?x?x?xf16>
      %238 = "arith.remf"(%2, %98) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %239 = "arith.constant"() <{value = 0 : i64}> : () -> i64
      %240 = "vector.transfer_read"(%55, %41, %36, %26, %239) <{operandSegmentSizes = array<i32: 1, 3, 1, 0>, permutation_map = affine_map<(d0, d1, d2) -> (0, d1)>}> : (tensor<?x?x?xi64>, index, index, index, i64) -> vector<18x28xi64>
      %241 = "vector.bitcast"(%84) : (vector<31xf32>) -> vector<31xi32>
      "bufferization.dealloc_tensor"(%58) : (tensor<?x?x?xf16>) -> ()
      %242 = "vector.splat"(%42) : (index) -> vector<31xindex>
      %243 = "vector.multi_reduction"(%241, %0) <{kind = #vector.kind<add>, reduction_dims = [0]}> : (vector<31xi32>, i32) -> i32
      "scf.yield"() : () -> ()
    }, {
      %228 = "vector.flat_transpose"(%82) <{columns = 31 : i32, rows = 1 : i32}> : (vector<31xi1>) -> vector<31xi1>
      %229 = "tensor.empty"() : () -> tensor<18x21xf32>
      %230 = "tensor.empty"() : () -> tensor<21x21xf32>
      %231 = "tensor.empty"() : () -> tensor<18x21xf32>
      %232 = "linalg.matmul"(%229, %230, %231) <{operandSegmentSizes = array<i32: 2, 1>}> ({
      ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
        %249 = "arith.mulf"(%arg2, %arg3) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
        %250 = "arith.addf"(%arg4, %249) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
        "linalg.yield"(%250) : (f32) -> ()
      }) : (tensor<18x21xf32>, tensor<21x21xf32>, tensor<18x21xf32>) -> tensor<18x21xf32>
      %233 = "tensor.empty"() : () -> tensor<31xi32>
      %234 = "math.fpowi"(%52, %233) <{fastmath = #arith.fastmath<none>}> : (tensor<31xf32>, tensor<31xi32>) -> tensor<31xf32>
      %235 = "math.tanh"(%59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
      %236 = "math.roundeven"(%56) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
      %237 = "math.roundeven"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
      %238 = "index.sizeof"() : () -> index
      %239 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<21x18x31xi1>
      %240 = "affine.if"(%20, %19) ({
        %249 = "math.log"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
        "memref.store"(%90, %75, %21, %23, %25) <{nontemporal = false}> : (f16, memref<31x28x28xf16>, index, index, index) -> ()
        "affine.vector_store"(%89, %87, %arg1, %19, %47) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (vector<31xi16>, memref<31x28x28xi16>, index, index, index) -> ()
        %250 = "arith.remsi"(%12, %13) : (i1, i1) -> i1
        %251 = "affine.vector_load"(%75, %39, %33, %20) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (memref<31x28x28xf16>, index, index, index) -> vector<31xf16>
        %252 = "tensor.empty"() : () -> tensor<21x31xf32>
        %253 = "tensor.empty"() : () -> tensor<18x31xf32>
        %254 = "linalg.matmul"(%231, %252, %253) <{operandSegmentSizes = array<i32: 2, 1>}> ({
        ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
          %258 = "arith.mulf"(%arg2, %arg3) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %259 = "arith.addf"(%arg4, %258) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "linalg.yield"(%259) : (f32) -> ()
        }) : (tensor<18x21xf32>, tensor<21x31xf32>, tensor<18x31xf32>) -> tensor<18x31xf32>
        %255 = "math.log"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
        %256 = "index.shl"(%29, %arg1) : (index, index) -> index
        %257 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<28xi16>
        "affine.yield"(%257) : (memref<28xi16>) -> ()
      }, {
        %249 = "math.rsqrt"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
        %250 = "math.copysign"(%14, %90) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %251 = "math.tanh"(%59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
        %252 = "math.copysign"(%2, %95) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %253 = "affine.max"(%36, %27, %23) <{map = affine_map<(d0, d1)[s0] -> (d0)>}> : (index, index, index) -> index
        %254 = "arith.remui"(%99, %13) : (i1, i1) -> i1
        %255 = "math.powf"(%49, %56) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>, tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
        %256 = "vector.shuffle"(%88, %88) <{mask = [1, 2, 3, 4, 6, 8, 12, 16, 17, 18, 20, 23, 26, 28, 29, 33, 35, 36, 40, 41, 42, 44, 45, 48, 52, 53, 55, 59, 60]}> : (vector<31xi16>, vector<31xi16>) -> vector<29xi16>
        %257 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<28xi16>
        "affine.yield"(%257) : (memref<28xi16>) -> ()
      }) {condition = affine_set<(d0, d1) : ((d1 floordiv 16) floordiv 64 >= 0, d1 >= 0, d1 floordiv 16 == 0)>} : (index, index) -> memref<28xi16>
      %241 = "memref.load"(%65, %22) <{nontemporal = false}> : (memref<31xf32>, index) -> f32
      %242 = "arith.divsi"(%3, %5) : (i16, i16) -> i16
      %243 = "math.ctlz"(%55) : (tensor<?x?x?xi64>) -> tensor<?x?x?xi64>
      %244 = "index.maxs"(%24, %41) : (index, index) -> index
      %245 = "math.atan"(%56) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
      %246 = "vector.broadcast"(%34) : (index) -> vector<21xindex>
      %247 = "vector.broadcast"(%12) : (i1) -> vector<21xi1>
      "vector.scatter"(%70, %23, %32, %29, %246, %247, %247) : (memref<31x28x28xi1>, index, index, index, vector<21xindex>, vector<21xi1>, vector<21xi1>) -> ()
      %248 = "affine.if"(%45, %44) ({
        %249 = "vector.extract"(%88) <{static_position = array<i64: 29>}> : (vector<31xi16>) -> i16
        %250 = "math.log10"(%2) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %251 = "bufferization.clone"(%67) : (memref<28xf32>) -> memref<28xf32>
        %252 = "tensor.expand_shape"(%59) <{reassociation = [[0], [1], [2, 3]]}> : (tensor<31x28x28xf32>) -> tensor<31x28x28x1xf32>
        %253 = "vector.matrix_multiply"(%81, %81) <{lhs_columns = 31 : i32, lhs_rows = 1 : i32, rhs_columns = 1 : i32}> : (vector<31xf32>, vector<31xf32>) -> vector<1xf32>
        %254 = "vector.broadcast"(%80) : (f32) -> vector<31x28x28xf32>
        %255 = "vector.fma"(%254, %254, %254) : (vector<31x28x28xf32>, vector<31x28x28xf32>, vector<31x28x28xf32>) -> vector<31x28x28xf32>
        %256 = "math.expm1"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
        %257 = "vector.contract"(%82, %228, %12) <{indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> ()>], iterator_types = [#vector.iterator_type<reduction>], kind = #vector.kind<maxui>}> : (vector<31xi1>, vector<31xi1>, i1) -> i1
        "affine.yield"(%80) : (f32) -> ()
      }, {
        "memref.assume_alignment"(%70) <{alignment = 2 : i32}> : (memref<31x28x28xi1>) -> ()
        %249 = "math.copysign"(%2, %95) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        "memref.store"(%98, %69, %16, %16, %16) <{nontemporal = false}> : (f16, memref<?x?x?xf16>, index, index, index) -> ()
        %250 = "math.sqrt"(%96) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?xf16>) -> tensor<?x?xf16>
        %251 = "index.divs"(%29, %28) : (index, index) -> index
        %252 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<21x31xf32>
        %253 = "tensor.empty"() : () -> tensor<18x31xf32>
        %254 = "linalg.matmul"(%231, %252, %253) <{operandSegmentSizes = array<i32: 2, 1>}> ({
        ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
          %258 = "arith.mulf"(%arg2, %arg3) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          %259 = "arith.addf"(%arg4, %258) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
          "linalg.yield"(%259) : (f32) -> ()
        }) : (tensor<18x21xf32>, memref<21x31xf32>, tensor<18x31xf32>) -> tensor<18x31xf32>
        %255 = "vector.broadcast"(%92) : (i64) -> vector<31x21x28xi64>
        %256 = "vector.broadcast"(%92) : (i64) -> vector<31x21xi64>
        %257:2 = "vector.scan"(%255, %256) <{inclusive = false, kind = #vector.kind<minsi>, reduction_dim = 2 : i64}> : (vector<31x21x28xi64>, vector<31x21xi64>) -> (vector<31x21x28xi64>, vector<31x21xi64>)
        "vector.print"(%83) <{punctuation = #vector.punctuation<newline>}> : (vector<31xi32>) -> ()
        "affine.yield"(%80) : (f32) -> ()
      }) {condition = affine_set<(d0, d1) : (d0 floordiv 4 >= 0, (d0 ceildiv 4) * 16 == 0, (d0 ceildiv 4 - d1) mod 32 >= 0)>} : (index, index) -> f32
      "scf.yield"() : () -> ()
    }, {
      %228 = "vector.reduction"(%82) <{fastmath = #arith.fastmath<none>, kind = #vector.kind<or>}> : (vector<31xi1>) -> i1
      %229 = "memref.atomic_rmw"(%3, %71, %16) <{kind = 4 : i64}> : (i16, memref<?xi16>, index) -> i16
      %230 = "vector.multi_reduction"(%89, %8) <{kind = #vector.kind<mul>, reduction_dims = [0]}> : (vector<31xi16>, i16) -> i16
      %231 = "math.log10"(%90) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %232 = "vector.multi_reduction"(%84, %80) <{kind = #vector.kind<add>, reduction_dims = [0]}> : (vector<31xf32>, f32) -> f32
      %233 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31xf16>
      %234 = "vector.extract_strided_slice"(%82) <{offsets = [0], sizes = [6], strides = [1]}> : (vector<31xi1>) -> vector<6xi1>
      %235 = "vector.extract"(%89) <{static_position = array<i64: 17>}> : (vector<31xi16>) -> i16
      %236 = "arith.remsi"(%8, %3) : (i16, i16) -> i16
      %237 = "tensor.cast"(%59) : (tensor<31x28x28xf32>) -> tensor<?x?x?xf32>
      %238 = "bufferization.clone"(%87) : (memref<31x28x28xi16>) -> memref<31x28x28xi16>
      %239 = "arith.addi"(%7, %92) : (i64, i64) -> i64
      %240 = "math.tan"(%14) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %241 = "math.exp"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
      %242 = "arith.xori"(%8, %8) : (i16, i16) -> i16
      %243 = "index.floordivs"(%34, %22) : (index, index) -> index
      "scf.yield"() : () -> ()
    }, {
      %228 = "math.atan"(%52) <{fastmath = #arith.fastmath<none>}> : (tensor<31xf32>) -> tensor<31xf32>
      %229 = "index.sizeof"() : () -> index
      %230 = "tensor.cast"(%56) : (tensor<21x18x31xf16>) -> tensor<?x?x?xf16>
      %231 = "math.cos"(%80) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
      %232 = "index.or"(%20, %36) : (index, index) -> index
      "memref.store"(%80, %67, %32) <{nontemporal = false}> : (f32, memref<28xf32>, index) -> ()
      %233 = "math.log10"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
      %234 = "math.log"(%56) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
      %235 = "bufferization.to_tensor"(%76) : (memref<?x?x?xi16>) -> tensor<?x?x?xi16>
      %236 = "arith.cmpi"(%5, %1) <{predicate = 5 : i64}> : (i16, i16) -> i1
      %237 = "tensor.dim"(%50, %16) : (tensor<?xf32>, index) -> index
      %238 = "math.roundeven"(%58) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?x?xf16>) -> tensor<?x?x?xf16>
      %239 = "math.log"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
      "scf.if"(%99) ({
        %242 = "math.ctpop"(%62) : (tensor<31xi16>) -> tensor<31xi16>
        %243 = "vector.contract"(%81, %81, %80) <{indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>, affine_map<(d0) -> ()>], iterator_types = [#vector.iterator_type<reduction>], kind = #vector.kind<maxf>}> : (vector<31xf32>, vector<31xf32>, f32) -> f32
        %244 = "index.floordivs"(%41, %20) : (index, index) -> index
        %245 = "tensor.splat"(%10) : (i1) -> tensor<21x18x31xi1>
        %246 = "vector.bitcast"(%82) : (vector<31xi1>) -> vector<31xi1>
        %247 = "index.or"(%21, %22) : (index, index) -> index
        %248 = "math.tanh"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
        %249 = "vector.extract_strided_slice"(%84) <{offsets = [10], sizes = [1], strides = [1]}> : (vector<31xf32>) -> vector<1xf32>
        "scf.yield"() : () -> ()
      }, {
        %242 = "vector.reduction"(%82) <{fastmath = #arith.fastmath<none>, kind = #vector.kind<or>}> : (vector<31xi1>) -> i1
        %243 = "vector.extract"(%81) <{static_position = array<i64: 19>}> : (vector<31xf32>) -> f32
        %244 = "memref.atomic_rmw"(%90, %69, %16, %16, %16) <{kind = 9 : i64}> : (f16, memref<?x?x?xf16>, index, index, index) -> f16
        %245 = "arith.constant"() <{value = 21369 : i16}> : () -> i16
        %246 = "memref.atomic_rmw"(%95, %78, %16) <{kind = 9 : i64}> : (f16, memref<?xf16>, index) -> f16
        %247 = "affine.min"(%229, %237, %18, %46, %232) <{map = affine_map<(d0, d1, d2, d3)[s0] -> (d2 + 14)>}> : (index, index, index, index, index) -> index
        %248 = "memref.realloc"(%73) : (memref<?xi32>) -> memref<31xi32>
        %249 = "index.ceildivs"(%33, %31) : (index, index) -> index
        "scf.yield"() : () -> ()
      }) : (i1) -> ()
      %240 = "arith.shli"(%92, %9) : (i64, i64) -> i64
      %241 = "index.xor"(%36, %42) : (index, index) -> index
      "scf.yield"() : () -> ()
    }) : (index) -> ()
    %102 = "memref.alloc"(%19) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<28x18x?xi64>
    %103 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<i64>
    %104 = "tensor.empty"(%41) : (index) -> tensor<28x18x?xi64>
    %105 = "linalg.generic"(%102, %103, %104) <{indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> ()>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = [#linalg.iterator_type<parallel>, #linalg.iterator_type<parallel>, #linalg.iterator_type<parallel>], operandSegmentSizes = array<i32: 2, 1>}> ({
    ^bb0(%arg2: i64, %arg3: i64, %arg4: i64):
      %228 = "index.sizeof"() : () -> index
      "linalg.yield"(%9) : (i64) -> ()
    }) : (memref<28x18x?xi64>, memref<i64>, tensor<28x18x?xi64>) -> tensor<28x18x?xi64>
    %106 = "vector.reduction"(%89) <{fastmath = #arith.fastmath<none>, kind = #vector.kind<or>}> : (vector<31xi16>) -> i16
    %107 = "spirv.CL.pow"(%95, %14) : (f16, f16) -> f16
    %108 = "vector.reduction"(%83) <{fastmath = #arith.fastmath<none>, kind = #vector.kind<maxsi>}> : (vector<31xi32>) -> i32
    %109 = "vector.broadcast"(%92) : (i64) -> vector<31x28x28xi64>
    %110 = "vector.broadcast"(%99) : (i1) -> vector<31x28x28xi1>
    %111 = "vector.broadcast"(%0) : (i32) -> vector<31x28x28xi32>
    %112 = "vector.gather"(%48, %37, %47, %22, %111, %110, %109) : (tensor<21x18x31xi64>, index, index, index, vector<31x28x28xi32>, vector<31x28x28xi1>, vector<31x28x28xi64>) -> vector<31x28x28xi64>
    %113 = "vector.extract"(%84) <{static_position = array<i64: 9>}> : (vector<31xf32>) -> f32
    %114 = "spirv.FUnordLessThanEqual"(%107, %2) : (f16, f16) -> i1
    %115 = "vector.broadcast"(%18) : (index) -> vector<18xindex>
    %116 = "vector.broadcast"(%10) : (i1) -> vector<18xi1>
    %117 = "vector.broadcast"(%15) : (i32) -> vector<18xi32>
    "vector.scatter"(%73, %16, %115, %116, %117) : (memref<?xi32>, index, vector<18xindex>, vector<18xi1>, vector<18xi32>) -> ()
    %118 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31xi16>
    %119 = "spirv.GL.Sqrt"(%14) : (f16) -> f16
    %120 = "math.tan"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
    %121 = "spirv.SLessThanEqual"(%9, %92) : (i64, i64) -> i1
    %122 = "spirv.GL.FMax"(%100, %90) : (f16, f16) -> f16
    %123 = "math.roundeven"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
    %124 = "spirv.LogicalNotEqual"(%12, %6) : (i1, i1) -> i1
    %125 = "scf.execute_region"() ({
      %228 = "arith.cmpf"(%107, %90) <{predicate = 8 : i64}> : (f16, f16) -> i1
      %229 = "math.tan"(%58) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?x?xf16>) -> tensor<?x?x?xf16>
      %230 = "arith.remf"(%122, %100) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %231 = "math.cttz"(%48) : (tensor<21x18x31xi64>) -> tensor<21x18x31xi64>
      %232 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xi16>
      "vector.compressstore"(%72, %36, %82, %88) : (memref<31xi16>, index, vector<31xi1>, vector<31xi16>) -> ()
      %233 = "vector.reduction"(%84) <{fastmath = #arith.fastmath<none>, kind = #vector.kind<add>}> : (vector<31xf32>) -> f32
      %234 = "affine.apply"(%22, %40, %45) <{map = affine_map<(d0, d1)[s0] -> (d0)>}> : (index, index, index) -> index
      %235 = "arith.cmpf"(%119, %107) <{predicate = 2 : i64}> : (f16, f16) -> i1
      %236 = "arith.cmpi"(%10, %13) <{predicate = 4 : i64}> : (i1, i1) -> i1
      %237 = "arith.divf"(%2, %119) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %238 = "math.ctlz"(%1) : (i16) -> i16
      %239 = "arith.subi"(%11, %11) : (i1, i1) -> i1
      %240 = "tensor.empty"(%34) : (index) -> tensor<?x31xi64>
      %241 = "linalg.broadcast"(%53, %240) <{dimensions = array<i64: 1>}> ({
      ^bb0(%arg2: i64, %arg3: i64):
        "linalg.yield"(%arg2) : (i64) -> ()
      }) : (tensor<?xi64>, tensor<?x31xi64>) -> tensor<?x31xi64>
      "affine.vector_store"(%81, %65, %arg1) <{map = affine_map<(d0) -> (d0)>}> : (vector<31xf32>, memref<31xf32>, index) -> ()
      %242 = "bufferization.to_memref"(%54) : (tensor<31xi1>) -> memref<31xi1>
      %243 = "tensor.empty"() : () -> tensor<21x18x31xf32>
      "scf.yield"(%243) : (tensor<21x18x31xf32>) -> ()
    }) : () -> tensor<21x18x31xf32>
    %126 = "vector.broadcast"(%15) : (i32) -> vector<2xi32>
    %127 = "spirv.BitwiseXor"(%126, %126) : (vector<2xi32>, vector<2xi32>) -> vector<2xi32>
    %128 = "math.fpowi"(%122, %0) <{fastmath = #arith.fastmath<none>}> : (f16, i32) -> f16
    %129 = "spirv.CL.floor"(%98) : (f16) -> f16
    %130 = "memref.realloc"(%65) : (memref<31xf32>) -> memref<31xf32>
    %131 = "spirv.FUnordLessThanEqual"(%14, %95) : (f16, f16) -> i1
    %132 = "index.maxs"(%22, %43) : (index, index) -> index
    %133 = "spirv.GL.InverseSqrt"(%90) : (f16) -> f16
    %134 = "index.ceildivs"(%arg1, %44) : (index, index) -> index
    %135 = "index.shrs"(%16, %arg1) : (index, index) -> index
    %136 = "math.atan"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
    %137 = "vector.broadcast"(%121) : (i1) -> vector<28x28x28x28xi1>
    %138 = "vector.contract"(%110, %110, %137) <{indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d4, d0, d1)>, affine_map<(d0, d1, d2, d3, d4) -> (d4, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>], iterator_types = [#vector.iterator_type<parallel>, #vector.iterator_type<parallel>, #vector.iterator_type<parallel>, #vector.iterator_type<parallel>, #vector.iterator_type<reduction>], kind = #vector.kind<minsi>}> : (vector<31x28x28xi1>, vector<31x28x28xi1>, vector<28x28x28x28xi1>) -> vector<28x28x28x28xi1>
    %139 = "spirv.IsInf"(%100) : (f16) -> i1
    %140 = "spirv.CL.pow"(%107, %129) : (f16, f16) -> f16
    %141 = "spirv.LogicalNotEqual"(%12, %11) : (i1, i1) -> i1
    %142 = "index.divs"(%44, %34) : (index, index) -> index
    %143 = "spirv.CL.u_max"(%92, %4) : (i64, i64) -> i64
    %144 = "spirv.SGreaterThan"(%7, %4) : (i64, i64) -> i1
    %145 = "vector.flat_transpose"(%126) <{columns = 1 : i32, rows = 2 : i32}> : (vector<2xi32>) -> vector<2xi32>
    %146 = "spirv.GL.FMax"(%98, %98) : (f16, f16) -> f16
    %147 = "arith.divf"(%119, %122) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
    %148 = "spirv.FUnordGreaterThan"(%2, %90) : (f16, f16) -> i1
    %149 = "memref.cast"(%77) : (memref<?xi64>) -> memref<18xi64>
    "memref.tensor_store"(%58, %69) : (tensor<?x?x?xf16>, memref<?x?x?xf16>) -> ()
    %150 = "math.roundeven"(%122) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
    %151 = "math.exp"(%58) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?x?xf16>) -> tensor<?x?x?xf16>
    %152 = "spirv.CL.tanh"(%98) : (f16) -> f16
    %153 = "spirv.CL.cos"(%80) : (f32) -> f32
    %154 = "scf.if"(%114) ({
      %228 = "vector.mask"(%82) ({
        %236 = "vector.multi_reduction"(%81, %84) <{kind = #vector.kind<mul>, reduction_dims = []}> : (vector<31xf32>, vector<31xf32>) -> vector<31xf32>
        "vector.yield"(%236) : (vector<31xf32>) -> ()
      }) : (vector<31xi1>) -> vector<31xf32>
      %229 = "math.rsqrt"(%122) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %230 = "math.atan2"(%119, %2) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %231 = "vector.shuffle"(%84, %81) <{mask = [1, 2, 6, 8, 11, 14, 15, 16, 17, 20, 22, 23, 25, 27, 28, 29, 32, 34, 36, 37, 39, 42, 44, 45, 47, 49, 50, 52, 54, 57, 59, 60, 61]}> : (vector<31xf32>, vector<31xf32>) -> vector<33xf32>
      %232 = "tensor.rank"(%52) : (tensor<31xf32>) -> index
      %233 = "affine.vector_load"(%64, %44) <{map = affine_map<(d0) -> (d0)>}> : (memref<?xi32>, index) -> vector<31xi32>
      %234 = "math.atan"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
      %235 = "tensor.generate"(%44) ({
      ^bb0(%arg2: index):
        %236 = "vector.reduction"(%233) <{fastmath = #arith.fastmath<none>, kind = #vector.kind<mul>}> : (vector<31xi32>) -> i32
        %237 = "tensor.cast"(%59) : (tensor<31x28x28xf32>) -> tensor<?x?x?xf32>
        %238 = "vector.broadcast"(%135) : (index) -> vector<18xindex>
        %239 = "vector.broadcast"(%6) : (i1) -> vector<18xi1>
        %240 = "vector.broadcast"(%80) : (f32) -> vector<18xf32>
        "vector.scatter"(%67, %23, %238, %239, %240) : (memref<28xf32>, index, vector<18xindex>, vector<18xi1>, vector<18xf32>) -> ()
        %241 = "bufferization.clone"(%87) : (memref<31x28x28xi16>) -> memref<31x28x28xi16>
        "tensor.yield"(%4) : (i64) -> ()
      }) : (index) -> tensor<?xi64>
      "scf.yield"(%131) : (i1) -> ()
    }, {
      %228 = "affine.min"(%21, %31) <{map = affine_map<(d0, d1) -> (d1 mod 64)>}> : (index, index) -> index
      %229 = "memref.alloc"(%32, %31) <{operandSegmentSizes = array<i32: 2, 0>}> : (index, index) -> memref<?x?x28xf32>
      %230 = "bufferization.clone"(%74) : (memref<31x28x28xi1>) -> memref<31x28x28xi1>
      %231 = "math.cos"(%59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
      %232 = "tensor.from_elements"(%80, %153, %153, %153, %153, %80, %80, %80, %153, %80, %80, %153, %80, %153, %153, %80, %153, %80, %153, %153, %80, %80, %80, %153, %153, %153, %80, %153) : (f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32) -> tensor<28xf32>
      %233 = "math.floor"(%59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
      %234 = "index.mul"(%20, %35) : (index, index) -> index
      %235 = "tensor.expand_shape"(%48) <{reassociation = [[0], [1], [2, 3]]}> : (tensor<21x18x31xi64>) -> tensor<21x18x31x1xi64>
      "scf.yield"(%141) : (i1) -> ()
    }) : (i1) -> i1
    %155 = "math.fma"(%59, %59, %59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>, tensor<31x28x28xf32>, tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
    %156 = "spirv.CL.exp"(%98) : (f16) -> f16
    "memref.assume_alignment"(%102) <{alignment = 4 : i32}> : (memref<28x18x?xi64>) -> ()
    %157 = "spirv.CL.floor"(%119) : (f16) -> f16
    %158 = "spirv.LogicalNotEqual"(%10, %114) : (i1, i1) -> i1
    %159 = "math.expm1"(%100) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
    %160 = "tensor.empty"() : () -> tensor<31x28x28xi1>
    %161 = "linalg.map"(%74, %70, %160) ({
    ^bb0(%arg2: i1, %arg3: i1):
      %228 = "memref.realloc"(%77) : (memref<?xi64>) -> memref<18xi64>
      %229 = "tensor.splat"(%129) : (f16) -> tensor<31x28x28xf16>
      %230 = "affine.vector_load"(%70, %44, %41, %arg1) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (memref<31x28x28xi1>, index, index, index) -> vector<31xi1>
      "affine.store"(%152, %75, %18, %32, %47) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (f16, memref<31x28x28xf16>, index, index, index) -> ()
      %231 = "vector.bitcast"(%81) : (vector<31xf32>) -> vector<31xf32>
      %232 = "arith.mulf"(%80, %80) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
      "memref.tensor_store"(%53, %77) : (tensor<?xi64>, memref<?xi64>) -> ()
      %233 = "tensor.generate"(%38) ({
      ^bb0(%arg4: index, %arg5: index, %arg6: index):
        %256 = "vector.matrix_multiply"(%230, %230) <{lhs_columns = 31 : i32, lhs_rows = 1 : i32, rhs_columns = 1 : i32}> : (vector<31xi1>, vector<31xi1>) -> vector<1xi1>
        %257 = "vector.create_mask"(%29, %arg1, %43) : (index, index, index) -> vector<31x28x28xi1>
        %258 = "math.copysign"(%80, %153) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
        %259 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31xi64>
        "linalg.transpose"(%61, %259) <{permutation = array<i64: 0>}> ({
        ^bb0(%arg7: i64, %arg8: i64):
          "linalg.yield"(%arg7) : (i64) -> ()
        }) : (tensor<31xi64>, memref<31xi64>) -> ()
        "tensor.yield"(%92) : (i64) -> ()
      }) : (index) -> tensor<?x28x28xi64>
      %234 = "index.divu"(%21, %142) : (index, index) -> index
      "scf.parallel"(%40, %19, %22, %36, %29, %43) <{operandSegmentSizes = array<i32: 2, 2, 2, 0>}> ({
      ^bb0(%arg4: index, %arg5: index):
        %256 = "math.exp"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
        %257 = "arith.negf"(%95) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %258 = "math.rsqrt"(%59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
        %259 = "tensor.collapse_shape"(%55) <{reassociation = [[0, 1], [2]]}> : (tensor<?x?x?xi64>) -> tensor<?x?xi64>
        %260 = "math.ipowi"(%139, %121) : (i1, i1) -> i1
        %261 = "math.log2"(%100) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %262 = "arith.subi"(%131, %6) : (i1, i1) -> i1
        %263 = "math.ipowi"(%54, %54) : (tensor<31xi1>, tensor<31xi1>) -> tensor<31xi1>
        %264 = "math.cttz"(%158) : (i1) -> i1
        %265 = "vector.matrix_multiply"(%82, %230) <{lhs_columns = 31 : i32, lhs_rows = 1 : i32, rhs_columns = 1 : i32}> : (vector<31xi1>, vector<31xi1>) -> vector<1xi1>
        %266 = "index.divu"(%46, %30) : (index, index) -> index
        %267 = "arith.divf"(%90, %140) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %268 = "vector.bitcast"(%109) : (vector<31x28x28xi64>) -> vector<31x28x28xi64>
        %269 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<28x31xi1>
        %270 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x31xi1>
        %271 = "tensor.empty"() : () -> tensor<28x31xi1>
        %272 = "linalg.matmul"(%269, %270, %271) <{operandSegmentSizes = array<i32: 2, 1>}> ({
        ^bb0(%arg6: i1, %arg7: i1, %arg8: i1):
          %275 = "arith.andi"(%arg6, %arg7) : (i1, i1) -> i1
          %276 = "arith.ori"(%arg8, %275) : (i1, i1) -> i1
          "linalg.yield"(%276) : (i1) -> ()
        }) : (memref<28x31xi1>, memref<31x31xi1>, tensor<28x31xi1>) -> tensor<28x31xi1>
        %273 = "vector.reduction"(%84) <{fastmath = #arith.fastmath<none>, kind = #vector.kind<minf>}> : (vector<31xf32>) -> f32
        %274 = "vector.broadcast"(%129) : (f16) -> vector<31x28x28xf16>
        "scf.yield"() : () -> ()
      }) : (index, index, index, index, index, index) -> ()
      %235 = "index.bool.constant"() <{value = true}> : () -> i1
      %236 = "arith.remf"(%140, %129) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %237 = "vector.transfer_read"(%61, %32, %143) <{operandSegmentSizes = array<i32: 1, 1, 1, 0>, permutation_map = affine_map<(d0) -> ()>}> : (tensor<31xi64>, index, i64) -> vector<i64>
      "scf.if"(%6) ({
        %256 = "tensor.collapse_shape"(%104) <{reassociation = [[0, 1], [2]]}> : (tensor<28x18x?xi64>) -> tensor<504x?xi64>
        %257 = "memref.cast"(%68) : (memref<?x?x?xi32>) -> memref<21x18x?xi32>
        %258 = "math.log"(%50) <{fastmath = #arith.fastmath<none>}> : (tensor<?xf32>) -> tensor<?xf32>
        %259 = "index.floordivs"(%33, %33) : (index, index) -> index
        %260 = "math.cttz"(%92) : (i64) -> i64
        %261 = "vector.broadcast"(%14) : (f16) -> vector<31xf16>
        %262 = "memref.alloc"(%42, %26, %30) <{operandSegmentSizes = array<i32: 3, 0>}> : (index, index, index) -> memref<?x?x?xi1>
        %263 = "math.copysign"(%59, %59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>, tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
        "scf.yield"() : () -> ()
      }, {
      }) : (i1) -> ()
      %238 = "tensor.empty"(%39) : (index) -> tensor<31x?x28xi64>
      %239 = "vector.gather"(%125, %28, %234, %16, %83, %230, %84) : (tensor<21x18x31xf32>, index, index, index, vector<31xi32>, vector<31xi1>, vector<31xf32>) -> vector<31xf32>
      %240 = "math.absi"(%99) : (i1) -> i1
      %241 = "vector.transfer_read"(%55, %39, %38, %44, %7) <{operandSegmentSizes = array<i32: 1, 3, 1, 0>, permutation_map = affine_map<(d0, d1, d2) -> (d1, d2)>}> : (tensor<?x?x?xi64>, index, index, index, i64) -> vector<31x28xi64>
      %242 = "math.round"(%152) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      "memref.assume_alignment"(%79) <{alignment = 4 : i32}> : (memref<?x?x28xi32>) -> ()
      %243 = "index.or"(%234, %18) : (index, index) -> index
      %244 = "arith.minsi"(%11, %arg3) : (i1, i1) -> i1
      %245 = "index.ceildivs"(%35, %44) : (index, index) -> index
      %246 = "index.ceildivs"(%33, %35) : (index, index) -> index
      %247 = "math.rsqrt"(%152) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %248 = "arith.remf"(%119, %14) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %249 = "math.floor"(%96) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?xf16>) -> tensor<?x?xf16>
      %250 = "math.expm1"(%129) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %251 = "arith.constant"() <{value = 0 : i16}> : () -> i16
      %252 = "vector.transfer_read"(%72, %arg1, %251) <{operandSegmentSizes = array<i32: 1, 1, 1, 0>, permutation_map = affine_map<(d0) -> ()>}> : (memref<31xi16>, index, i16) -> vector<i16>
      %253 = "arith.floordivsi"(%1, %1) : (i16, i16) -> i16
      %254 = "tensor.insert"(%90, %56, %20, %30, %41) : (f16, tensor<21x18x31xf16>, index, index, index) -> tensor<21x18x31xf16>
      %255 = "math.cttz"(%92) : (i64) -> i64
      "linalg.yield"(%11) : (i1) -> ()
    }) : (memref<31x28x28xi1>, memref<31x28x28xi1>, tensor<31x28x28xi1>) -> tensor<31x28x28xi1>
    %162 = "spirv.CL.tanh"(%98) : (f16) -> f16
    %163 = "tensor.rank"(%61) : (tensor<31xi64>) -> index
    %164 = "spirv.FUnordLessThanEqual"(%162, %162) : (f16, f16) -> i1
    %165 = "arith.remsi"(%141, %12) : (i1, i1) -> i1
    %166 = "affine.vector_load"(%71, %30) <{map = affine_map<(d0) -> (d0)>}> : (memref<?xi16>, index) -> vector<18xi16>
    %167 = "math.ipowi"(%124, %124) : (i1, i1) -> i1
    "vector.compressstore"(%67, %36, %82, %84) : (memref<28xf32>, index, vector<31xi1>, vector<31xf32>) -> ()
    "affine.store"(%133, %78, %40) <{map = affine_map<(d0) -> (d0)>}> : (f16, memref<?xf16>, index) -> ()
    %168 = "arith.cmpi"(%7, %7) <{predicate = 4 : i64}> : (i64, i64) -> i1
    %169 = "spirv.CL.rint"(%14) : (f16) -> f16
    %170 = "spirv.FUnordEqual"(%152, %95) : (f16, f16) -> i1
    %171 = "spirv.CL.pow"(%98, %156) : (f16, f16) -> f16
    %172 = "index.xor"(%21, %38) : (index, index) -> index
    %173 = "spirv.CL.fma"(%146, %100, %90) : (f16, f16, f16) -> f16
    %174 = "scf.parallel"(%134, %163, %26, %70) <{operandSegmentSizes = array<i32: 1, 1, 1, 1>}> ({
    ^bb0(%arg2: index):
      %228 = "math.log10"(%50) <{fastmath = #arith.fastmath<none>}> : (tensor<?xf32>) -> tensor<?xf32>
      %229 = "vector.broadcast"(%3) : (i16) -> vector<21x18x31xi16>
      %230 = "vector.broadcast"(%170) : (i1) -> vector<21x18x31xi1>
      %231 = "vector.broadcast"(%0) : (i32) -> vector<21x18x31xi32>
      %232 = "vector.gather"(%72, %24, %231, %230, %229) : (memref<31xi16>, index, vector<21x18x31xi32>, vector<21x18x31xi1>, vector<21x18x31xi16>) -> vector<21x18x31xi16>
      %233 = "tensor.rank"(%48) : (tensor<21x18x31xi64>) -> index
      %234 = "math.cos"(%171) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %235 = "tensor.dim"(%57, %16) : (tensor<28xf32>, index) -> index
      %236 = "tensor.from_elements"(%169, %156, %14, %122, %14, %146, %152, %90, %171, %156, %107, %140, %107, %95, %152, %146, %133, %140, %90, %98, %90, %156, %95, %90, %152, %169, %140, %129, %129, %98, %171) : (f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16) -> tensor<31xf16>
      %237 = "affine.if"(%39, %36, %43, %41) ({
        %248 = "vector.broadcast"(%0) : (i32) -> vector<31x31xi32>
        %249 = "vector.outerproduct"(%83, %83, %248) <{kind = #vector.kind<or>}> : (vector<31xi32>, vector<31xi32>, vector<31x31xi32>) -> vector<31x31xi32>
        "memref.store"(%15, %79, %16, %16, %16) <{nontemporal = false}> : (i32, memref<?x?x28xi32>, index, index, index) -> ()
        "memref.store"(%162, %75, %46, %40, %21) <{nontemporal = false}> : (f16, memref<31x28x28xf16>, index, index, index) -> ()
        %250 = "arith.constant"() <{value = 792050034 : i64}> : () -> i64
        %251 = "memref.realloc"(%72) : (memref<31xi16>) -> memref<18xi16>
        %252 = "math.floor"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
        %253 = "math.copysign"(%129, %157) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %254 = "index.shru"(%135, %46) : (index, index) -> index
        "affine.yield"(%3) : (i16) -> ()
      }, {
        %248 = "vector.transpose"(%229) <{transp = [0, 2, 1]}> : (vector<21x18x31xi16>) -> vector<21x31x18xi16>
        %249 = "tensor.cast"(%59) : (tensor<31x28x28xf32>) -> tensor<?x?x?xf32>
        %250 = "arith.muli"(%8, %5) : (i16, i16) -> i16
        %251 = "arith.remui"(%0, %0) : (i32, i32) -> i32
        %252 = "tensor.splat"(%92) : (i64) -> tensor<31x28x28xi64>
        %253 = "arith.minui"(%10, %139) : (i1, i1) -> i1
        %254 = "vector.maskedload"(%72, %36, %82, %89) : (memref<31xi16>, index, vector<31xi1>, vector<31xi16>) -> vector<31xi16>
        %255 = "math.atan2"(%57, %57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>, tensor<28xf32>) -> tensor<28xf32>
        "affine.yield"(%1) : (i16) -> ()
      }) {condition = affine_set<(d0, d1, d2, d3) : (d1 == 0)>} : (index, index, index, index) -> i16
      %238 = "memref.atomic_rmw"(%3, %87, %43, %36, %37) <{kind = 10 : i64}> : (i16, memref<31x28x28xi16>, index, index, index) -> i16
      %239 = "vector.splat"(%42) : (index) -> vector<31xindex>
      %240 = "index.bool.constant"() <{value = false}> : () -> i1
      %241 = "vector.broadcast"(%1) : (i16) -> vector<18x18xi16>
      %242 = "vector.outerproduct"(%166, %166, %241) <{kind = #vector.kind<minui>}> : (vector<18xi16>, vector<18xi16>, vector<18x18xi16>) -> vector<18x18xi16>
      %243 = "bufferization.clone"(%65) : (memref<31xf32>) -> memref<31xf32>
      %244 = "affine.if"(%27) ({
        %248 = "vector.broadcast"(%4) : (i64) -> vector<31xi64>
        %249 = "vector.multi_reduction"(%109, %248) <{kind = #vector.kind<maxsi>, reduction_dims = [1, 2]}> : (vector<31x28x28xi64>, vector<31xi64>) -> vector<31xi64>
        %250 = "vector.load"(%64, %16) : (memref<?xi32>, index) -> vector<31x28x28xi32>
        %251 = "vector.broadcast"(%114) : (i1) -> vector<2xi1>
        %252 = "vector.mask"(%251) ({
          %258 = "vector.multi_reduction"(%145, %126) <{kind = #vector.kind<and>, reduction_dims = []}> : (vector<2xi32>, vector<2xi32>) -> vector<2xi32>
          "vector.yield"(%258) : (vector<2xi32>) -> ()
        }) : (vector<2xi1>) -> vector<2xi32>
        %253 = "math.exp"(%96) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?xf16>) -> tensor<?x?xf16>
        %254 = "math.log10"(%140) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %255 = "math.expm1"(%119) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %256 = "arith.subi"(%6, %148) : (i1, i1) -> i1
        %257 = "math.log2"(%122) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        "affine.yield"(%75) : (memref<31x28x28xf16>) -> ()
      }, {
        %248 = "tensor.splat"(%140) : (f16) -> tensor<21x18x31xf16>
        %249 = "vector.extract"(%89) <{static_position = array<i64: 25>}> : (vector<31xi16>) -> i16
        %250 = "memref.realloc"(%77) : (memref<?xi64>) -> memref<21xi64>
        %251 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<28xf32>
        "affine.store"(%240, %74, %28, %18, %27) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (i1, memref<31x28x28xi1>, index, index, index) -> ()
        %252 = "arith.negf"(%14) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %253 = "index.xor"(%45, %36) : (index, index) -> index
        %254 = "affine.vector_load"(%103) <{map = affine_map<() -> ()>}> : (memref<i64>) -> vector<18xi64>
        "affine.yield"(%75) : (memref<31x28x28xf16>) -> ()
      }) {condition = affine_set<(d0) : (d0 floordiv 16 >= 0, d0 * -2 == 0, d0 * -2 >= 0, -d0 >= 0)>} : (index) -> memref<31x28x28xf16>
      %245 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31xi1>
      "memref.tensor_store"(%54, %245) : (tensor<31xi1>, memref<31xi1>) -> ()
      %246 = "math.tan"(%157) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %247 = "math.cos"(%157) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      "scf.reduce"(%66) ({
      ^bb0(%arg3: memref<31x28x28xi1>, %arg4: memref<31x28x28xi1>):
        %248 = "math.log1p"(%59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
        %249 = "tensor.rank"(%160) : (tensor<31x28x28xi1>) -> index
        %250 = "arith.remsi"(%7, %143) : (i64, i64) -> i64
        %251 = "index.sizeof"() : () -> index
        "vector.print"(%110) <{punctuation = #vector.punctuation<newline>}> : (vector<31x28x28xi1>) -> ()
        %252 = "index.add"(%arg1, %135) : (index, index) -> index
        %253 = "arith.divui"(%164, %114) : (i1, i1) -> i1
        %254 = "tensor.splat"(%129) : (f16) -> tensor<31x28x28xf16>
        "scf.reduce.return"(%arg3) : (memref<31x28x28xi1>) -> ()
      }) : (memref<31x28x28xi1>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index, memref<31x28x28xi1>) -> memref<31x28x28xi1>
    %175 = "index.casts"(%154) : (i1) -> index
    %176 = "affine.vector_load"(%102, %24, %23, %172) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (memref<28x18x?xi64>, index, index, index) -> vector<18xi64>
    %177 = "spirv.CL.s_abs"(%143) : (i64) -> i64
    %178 = "vector.broadcast"(%80) : (f32) -> vector<21x18x31xf32>
    %179 = "vector.fma"(%178, %178, %178) : (vector<21x18x31xf32>, vector<21x18x31xf32>, vector<21x18x31xf32>) -> vector<21x18x31xf32>
    %180 = "math.rsqrt"(%52) <{fastmath = #arith.fastmath<none>}> : (tensor<31xf32>) -> tensor<31xf32>
    %181 = "spirv.CL.tanh"(%122) : (f16) -> f16
    %182 = "tensor.empty"() : () -> tensor<28xi16>
    %183 = "vector.broadcast"(%8) : (i16) -> vector<21x18x31xi16>
    %184 = "vector.broadcast"(%99) : (i1) -> vector<21x18x31xi1>
    %185 = "vector.broadcast"(%0) : (i32) -> vector<21x18x31xi32>
    %186 = "vector.gather"(%182, %27, %185, %184, %183) : (tensor<28xi16>, index, vector<21x18x31xi32>, vector<21x18x31xi1>, vector<21x18x31xi16>) -> vector<21x18x31xi16>
    %187 = "spirv.LogicalNotEqual"(%114, %13) : (i1, i1) -> i1
    %188 = "spirv.GL.FSign"(%173) : (f16) -> f16
    %189 = "arith.addi"(%131, %154) : (i1, i1) -> i1
    %190 = "tensor.empty"() : () -> tensor<31xi1>
    %191 = "linalg.map"(%54, %54, %190) ({
    ^bb0(%arg2: i1, %arg3: i1):
      %228 = "math.ipowi"(%3, %3) : (i16, i16) -> i16
      %229 = "arith.cmpi"(%7, %7) <{predicate = 1 : i64}> : (i64, i64) -> i1
      %230 = "vector.multi_reduction"(%166, %8) <{kind = #vector.kind<maxsi>, reduction_dims = [0]}> : (vector<18xi16>, i16) -> i16
      %231 = "affine.min"(%27, %19, %44) <{map = affine_map<(d0, d1, d2) -> (-d0)>}> : (index, index, index) -> index
      %232 = "arith.cmpi"(%177, %4) <{predicate = 2 : i64}> : (i64, i64) -> i1
      %233 = "arith.shrui"(%12, %12) : (i1, i1) -> i1
      %234 = "math.round"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
      %235 = "index.maxs"(%18, %17) : (index, index) -> index
      %236 = "math.sqrt"(%50) <{fastmath = #arith.fastmath<none>}> : (tensor<?xf32>) -> tensor<?xf32>
      %237 = "tensor.rank"(%125) : (tensor<21x18x31xf32>) -> index
      "affine.vector_store"(%84, %65, %41) <{map = affine_map<(d0) -> (d0)>}> : (vector<31xf32>, memref<31xf32>, index) -> ()
      %238 = "math.roundeven"(%14) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %239 = "index.shrs"(%25, %29) : (index, index) -> index
      %240 = "tensor.splat"(%92) : (i64) -> tensor<31x28x28xi64>
      %241 = "math.expm1"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
      %242 = "vector.shuffle"(%176, %176) <{mask = [2, 5, 7, 9, 10, 13, 16, 22, 26, 27, 29, 33, 34, 35]}> : (vector<18xi64>, vector<18xi64>) -> vector<14xi64>
      %243 = "scf.while"(%90) ({
      ^bb0(%arg4: f16):
        %260 = "math.log10"(%80) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
        %261 = "tensor.cast"(%59) : (tensor<31x28x28xf32>) -> tensor<?x?x?xf32>
        %262 = "math.cos"(%95) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %263 = "index.mul"(%34, %175) : (index, index) -> index
        %264 = "linalg.copy"(%51, %53) <{operandSegmentSizes = array<i32: 1, 1>}> ({
        ^bb0(%arg5: i64, %arg6: i64):
          "linalg.yield"(%arg5) : (i64) -> ()
        }) : (tensor<?xi64>, tensor<?xi64>) -> tensor<?xi64>
        %265 = "math.fpowi"(%119, %0) <{fastmath = #arith.fastmath<none>}> : (f16, i32) -> f16
        "memref.assume_alignment"(%72) <{alignment = 4 : i32}> : (memref<31xi16>) -> ()
        %266 = "index.sizeof"() : () -> index
        "scf.condition"(%121, %140) : (i1, f16) -> ()
      }, {
      ^bb0(%arg4: f16):
        %260 = "affine.apply"(%237, %31) <{map = affine_map<(d0, d1) -> (d1 mod 64)>}> : (index, index) -> index
        %261 = "math.round"(%153) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
        "linalg.transpose"(%57, %67) <{permutation = array<i64: 0>}> ({
        ^bb0(%arg5: f32, %arg6: f32):
          "linalg.yield"(%arg5) : (f32) -> ()
        }) : (tensor<28xf32>, memref<28xf32>) -> ()
        %262 = "vector.bitcast"(%88) : (vector<31xi16>) -> vector<31xi16>
        %263 = "math.sqrt"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
        %264 = "math.exp"(%152) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %265 = "arith.mulf"(%2, %14) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        "memref.assume_alignment"(%69) <{alignment = 16 : i32}> : (memref<?x?x?xf16>) -> ()
        %266 = "math.log"(%119) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %267 = "math.log10"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
        "memref.assume_alignment"(%70) <{alignment = 4 : i32}> : (memref<31x28x28xi1>) -> ()
        %268 = "index.ceildivs"(%231, %231) : (index, index) -> index
        %269 = "index.shrs"(%arg1, %38) : (index, index) -> index
        %270 = "index.add"(%40, %31) : (index, index) -> index
        %271 = "arith.subi"(%3, %230) : (i16, i16) -> i16
        %272 = "index.xor"(%135, %163) : (index, index) -> index
        "scf.yield"(%14) : (f16) -> ()
      }) : (f16) -> f16
      %244 = "vector.broadcast"(%80) : (f32) -> vector<28xf32>
      %245 = "vector.broadcast"(%10) : (i1) -> vector<28xi1>
      %246 = "vector.broadcast"(%15) : (i32) -> vector<28xi32>
      %247 = "vector.gather"(%125, %19, %134, %35, %246, %245, %244) : (tensor<21x18x31xf32>, index, index, index, vector<28xi32>, vector<28xi1>, vector<28xf32>) -> vector<28xf32>
      %248 = "math.floor"(%96) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?xf16>) -> tensor<?x?xf16>
      %249 = "math.log10"(%56) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
      %250 = "math.atan"(%96) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?xf16>) -> tensor<?x?xf16>
      %251 = "index.bool.constant"() <{value = true}> : () -> i1
      "memref.store"(%153, %67, %35) <{nontemporal = false}> : (f32, memref<28xf32>, index) -> ()
      %252 = "index.or"(%33, %21) : (index, index) -> index
      %253 = "index.ceildivs"(%34, %235) : (index, index) -> index
      %254 = "vector.matrix_multiply"(%126, %126) <{lhs_columns = 2 : i32, lhs_rows = 1 : i32, rhs_columns = 1 : i32}> : (vector<2xi32>, vector<2xi32>) -> vector<1xi32>
      %255 = "index.divu"(%27, %172) : (index, index) -> index
      %256 = "tensor.splat"(%171) : (f16) -> tensor<28xf16>
      "affine.parallel"() <{lowerBoundsGroups = dense<1> : tensor<3xi32>, lowerBoundsMap = affine_map<() -> (0, 0, 0)>, reductions = [], steps = [1, 1, 1], upperBoundsGroups = dense<1> : tensor<3xi32>, upperBoundsMap = affine_map<() -> (28, 28, 28)>}> ({
      ^bb0(%arg4: index, %arg5: index, %arg6: index):
        %260 = "tensor.insert"(%7, %55, %16, %16, %16) : (i64, tensor<?x?x?xi64>, index, index, index) -> tensor<?x?x?xi64>
        "affine.yield"() : () -> ()
      }) : () -> ()
      %257 = "vector.transpose"(%185) <{transp = [1, 2, 0]}> : (vector<21x18x31xi32>) -> vector<18x31x21xi32>
      %258 = "math.exp"(%162) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %259 = "memref.atomic_rmw"(%95, %69, %16, %16, %16) <{kind = 9 : i64}> : (f16, memref<?x?x?xf16>, index, index, index) -> f16
      "linalg.yield"(%12) : (i1) -> ()
    }) : (tensor<31xi1>, tensor<31xi1>, tensor<31xi1>) -> tensor<31xi1>
    %192 = "scf.parallel"(%33, %40, %45, %109) <{operandSegmentSizes = array<i32: 1, 1, 1, 1>}> ({
    ^bb0(%arg2: index):
      %228 = "math.cos"(%156) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %229 = "index.bool.constant"() <{value = true}> : () -> i1
      %230 = "index.divs"(%27, %24) : (index, index) -> index
      %231 = "math.log"(%59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
      %232 = "tensor.generate"(%47) ({
      ^bb0(%arg3: index):
        %244 = "tensor.collapse_shape"(%125) <{reassociation = [[0, 1], [2]]}> : (tensor<21x18x31xf32>) -> tensor<378x31xf32>
        %245 = "math.expm1"(%59) <{fastmath = #arith.fastmath<none>}> : (tensor<31x28x28xf32>) -> tensor<31x28x28xf32>
        %246 = "vector.reduction"(%81) <{fastmath = #arith.fastmath<none>, kind = #vector.kind<minf>}> : (vector<31xf32>) -> f32
        %247 = "tensor.expand_shape"(%59) <{reassociation = [[0], [1], [2, 3]]}> : (tensor<31x28x28xf32>) -> tensor<31x28x28x1xf32>
        "tensor.yield"(%140) : (f16) -> ()
      }) : (index) -> tensor<?xf16>
      %233 = "math.round"(%95) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %234 = "index.floordivs"(%23, %37) : (index, index) -> index
      %235 = "index.mul"(%16, %172) : (index, index) -> index
      %236 = "arith.negf"(%157) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %237 = "math.expm1"(%58) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?x?xf16>) -> tensor<?x?x?xf16>
      %238 = "arith.cmpf"(%169, %173) <{predicate = 0 : i64}> : (f16, f16) -> i1
      %239 = "memref.atomic_rmw"(%14, %75, %44, %41, %25) <{kind = 0 : i64}> : (f16, memref<31x28x28xf16>, index, index, index) -> f16
      %240 = "vector.multi_reduction"(%89, %88) <{kind = #vector.kind<maxsi>, reduction_dims = []}> : (vector<31xi16>, vector<31xi16>) -> vector<31xi16>
      %241 = "math.exp"(%188) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %242 = "affine.parallel"() <{lowerBoundsGroups = dense<1> : tensor<1xi32>, lowerBoundsMap = affine_map<() -> (0)>, reductions = [9], steps = [1], upperBoundsGroups = dense<1> : tensor<1xi32>, upperBoundsMap = affine_map<() -> (21)>}> ({
      ^bb0(%arg3: index):
        %244 = "vector.shuffle"(%186, %186) <{mask = [0, 3, 4, 7, 8, 9, 10, 12, 13, 14, 16, 17, 20, 23, 24, 25, 27, 30, 31, 33, 34, 35, 40, 41]}> : (vector<21x18x31xi16>, vector<21x18x31xi16>) -> vector<24x18x31xi16>
        "affine.yield"(%122) : (f16) -> ()
      }) : () -> memref<21xf16>
      %243 = "math.roundeven"(%181) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      "scf.reduce"(%112) ({
      ^bb0(%arg3: vector<31x28x28xi64>, %arg4: vector<31x28x28xi64>):
        %244 = "math.log10"(%58) <{fastmath = #arith.fastmath<none>}> : (tensor<?x?x?xf16>) -> tensor<?x?x?xf16>
        %245 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31xf16>
        %246 = "index.divs"(%38, %38) : (index, index) -> index
        %247 = "arith.cmpf"(%173, %188) <{predicate = 14 : i64}> : (f16, f16) -> i1
        %248 = "math.log"(%80) <{fastmath = #arith.fastmath<none>}> : (f32) -> f32
        %249 = "math.round"(%90) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %250 = "vector.bitcast"(%183) : (vector<21x18x31xi16>) -> vector<21x18x31xi16>
        %251 = "vector.broadcast"(%11) : (i1) -> vector<i1>
        %252 = "vector.transfer_write"(%251, %63, %28) <{operandSegmentSizes = array<i32: 1, 1, 1, 0>, permutation_map = affine_map<(d0) -> ()>}> : (vector<i1>, tensor<?xi1>, index) -> tensor<?xi1>
        "scf.reduce.return"(%112) : (vector<31x28x28xi64>) -> ()
      }) : (vector<31x28x28xi64>) -> ()
      "scf.yield"() : () -> ()
    }) : (index, index, index, vector<31x28x28xi64>) -> vector<31x28x28xi64>
    %193 = "spirv.GL.FMin"(%129, %152) : (f16, f16) -> f16
    %194 = "math.rsqrt"(%56) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
    %195 = "arith.remf"(%14, %129) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
    %196 = "vector.broadcast"(%114) : (i1) -> vector<31x28xi1>
    %197 = "vector.multi_reduction"(%110, %196) <{kind = #vector.kind<or>, reduction_dims = [2]}> : (vector<31x28x28xi1>, vector<31x28xi1>) -> vector<31x28xi1>
    %198 = "spirv.FOrdGreaterThanEqual"(%14, %162) : (f16, f16) -> i1
    %199 = "spirv.CL.tanh"(%181) : (f16) -> f16
    %200 = "scf.if"(%170) ({
      %228 = "arith.remsi"(%121, %10) : (i1, i1) -> i1
      %229 = "arith.xori"(%121, %158) : (i1, i1) -> i1
      %230 = "memref.alloca"(%175, %135, %33) <{operandSegmentSizes = array<i32: 3, 0>}> : (index, index, index) -> memref<?x?x?xi1>
      %231 = "math.cttz"(%7) : (i64) -> i64
      %232 = "arith.constant"() <{value = 0x4DF30D84 : f32}> : () -> f32
      %233 = "index.divu"(%17, %29) : (index, index) -> index
      "affine.vector_store"(%81, %67, %163) <{map = affine_map<(d0) -> (d0)>}> : (vector<31xf32>, memref<28xf32>, index) -> ()
      %234 = "math.roundeven"(%52) <{fastmath = #arith.fastmath<none>}> : (tensor<31xf32>) -> tensor<31xf32>
      "scf.yield"(%99) : (i1) -> ()
    }, {
      %228 = "index.shru"(%22, %19) : (index, index) -> index
      %229 = "tensor.collapse_shape"(%125) <{reassociation = [[0, 1], [2]]}> : (tensor<21x18x31xf32>) -> tensor<378x31xf32>
      %230 = "vector.broadcast"(%18) : (index) -> vector<21xindex>
      %231 = "vector.broadcast"(%13) : (i1) -> vector<21xi1>
      %232 = "vector.broadcast"(%122) : (f16) -> vector<21xf16>
      "vector.scatter"(%69, %16, %16, %16, %230, %231, %232) : (memref<?x?x?xf16>, index, index, index, vector<21xindex>, vector<21xi1>, vector<21xf16>) -> ()
      %233 = "index.divu"(%29, %134) : (index, index) -> index
      %234 = "math.log"(%50) <{fastmath = #arith.fastmath<none>}> : (tensor<?xf32>) -> tensor<?xf32>
      %235 = "vector.transpose"(%111) <{transp = [0, 2, 1]}> : (vector<31x28x28xi32>) -> vector<31x28x28xi32>
      %236 = "memref.realloc"(%77) : (memref<?xi64>) -> memref<31xi64>
      %237 = "affine.vector_load"(%77, %34) <{map = affine_map<(d0) -> (d0)>}> : (memref<?xi64>, index) -> vector<28xi64>
      "scf.yield"(%12) : (i1) -> ()
    }) : (i1) -> i1
    "scf.parallel"(%27, %172, %27, %44, %28, %41) <{operandSegmentSizes = array<i32: 2, 2, 2, 0>}> ({
    ^bb0(%arg2: index, %arg3: index):
      %228 = "math.round"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
      %229 = "math.ipowi"(%187, %164) : (i1, i1) -> i1
      %230 = "index.divu"(%26, %43) : (index, index) -> index
      %231 = "math.cttz"(%13) : (i1) -> i1
      %232 = "arith.negf"(%122) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %233 = "memref.load"(%79, %16, %16, %24) <{nontemporal = false}> : (memref<?x?x28xi32>, index, index, index) -> i32
      %234 = "tensor.empty"(%34) : (index) -> tensor<?xi64>
      %235 = "linalg.map"(%53, %51, %51, %234) ({
      ^bb0(%arg4: i64, %arg5: i64, %arg6: i64):
        %246 = "arith.cmpi"(%131, %10) <{predicate = 0 : i64}> : (i1, i1) -> i1
        %247 = "math.copysign"(%133, %157) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %248 = "vector.shuffle"(%145, %145) <{mask = [2, 3]}> : (vector<2xi32>, vector<2xi32>) -> vector<2xi32>
        "memref.store"(%143, %102, %38, %16, %16) <{nontemporal = false}> : (i64, memref<28x18x?xi64>, index, index, index) -> ()
        %249 = "math.ipowi"(%144, %164) : (i1, i1) -> i1
        %250 = "index.xor"(%175, %26) : (index, index) -> index
        %251 = "arith.subi"(%9, %arg5) : (i64, i64) -> i64
        %252 = "math.log1p"(%57) <{fastmath = #arith.fastmath<none>}> : (tensor<28xf32>) -> tensor<28xf32>
        %253 = "math.rsqrt"(%98) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %254 = "index.sizeof"() : () -> index
        %255 = "tensor.empty"(%175, %27) : (index, index) -> tensor<31x?x?xi16>
        %256 = "arith.divui"(%177, %9) : (i64, i64) -> i64
        "affine.vector_store"(%166, %72, %43) <{map = affine_map<(d0) -> (d0)>}> : (vector<18xi16>, memref<31xi16>, index) -> ()
        %257 = "math.fpowi"(%199, %15) <{fastmath = #arith.fastmath<none>}> : (f16, i32) -> f16
        %258 = "arith.mulf"(%199, %156) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        "memref.store"(%15, %73, %16) <{nontemporal = false}> : (i32, memref<?xi32>, index) -> ()
        %259 = "vector.broadcast"(%44) : (index) -> vector<31xindex>
        "vector.scatter"(%87, %34, %39, %36, %259, %82, %88) : (memref<31x28x28xi16>, index, index, index, vector<31xindex>, vector<31xi1>, vector<31xi16>) -> ()
        %260 = "arith.divsi"(%arg6, %143) : (i64, i64) -> i64
        %261 = "memref.load"(%66, %32, %37, %26) <{nontemporal = false}> : (memref<31x28x28xi1>, index, index, index) -> i1
        %262 = "math.ceil"(%181) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %263 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xf32>
        %264 = "arith.remf"(%2, %199) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
        %265 = "arith.cmpi"(%148, %114) <{predicate = 3 : i64}> : (i1, i1) -> i1
        %266 = "index.or"(%25, %43) : (index, index) -> index
        %267 = "affine.max"(%42, %arg3) <{map = affine_map<(d0)[s0] -> (d0 + (d0 * 4) ceildiv 16)>}> : (index, index) -> index
        "memref.assume_alignment"(%67) <{alignment = 4 : i32}> : (memref<28xf32>) -> ()
        %268 = "affine.min"(%175, %46, %250) <{map = affine_map<(d0, d1)[s0] -> (-1)>}> : (index, index, index) -> index
        %269 = "math.exp2"(%107) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %270 = "math.fma"(%49, %56, %56) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>, tensor<21x18x31xf16>, tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
        %271 = "index.or"(%268, %38) : (index, index) -> index
        %272 = "arith.remui"(%124, %148) : (i1, i1) -> i1
        %273 = "bufferization.clone"(%65) : (memref<31xf32>) -> memref<31xf32>
        "linalg.yield"(%4) : (i64) -> ()
      }) : (tensor<?xi64>, tensor<?xi64>, tensor<?xi64>, tensor<?xi64>) -> tensor<?xi64>
      %236 = "tensor.expand_shape"(%62) <{reassociation = [[0, 1]]}> : (tensor<31xi16>) -> tensor<31x1xi16>
      %237 = "tensor.cast"(%58) : (tensor<?x?x?xf16>) -> tensor<18x18x21xf16>
      %238 = "tensor.empty"() : () -> tensor<31x28x28xf16>
      %239 = "linalg.map"(%75, %75, %75, %238) ({
      ^bb0(%arg4: f16, %arg5: f16, %arg6: f16):
        %246 = "vector.splat"(%146) : (f16) -> vector<28xf16>
        "memref.assume_alignment"(%70) <{alignment = 2 : i32}> : (memref<31x28x28xi1>) -> ()
        %247 = "arith.addi"(%124, %121) : (i1, i1) -> i1
        %248 = "index.ceildivs"(%22, %163) : (index, index) -> index
        %249 = "vector.mask"(%82) ({
          %282 = "vector.multi_reduction"(%84, %84) <{kind = #vector.kind<maxf>, reduction_dims = []}> : (vector<31xf32>, vector<31xf32>) -> vector<31xf32>
          "vector.yield"(%282) : (vector<31xf32>) -> ()
        }) : (vector<31xi1>) -> vector<31xf32>
        %250 = "index.bool.constant"() <{value = false}> : () -> i1
        %251 = "vector.transpose"(%82) <{transp = [0]}> : (vector<31xi1>) -> vector<31xi1>
        %252 = "index.or"(%142, %172) : (index, index) -> index
        %253 = "math.log"(%152) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %254 = "math.ipowi"(%61, %61) : (tensor<31xi64>, tensor<31xi64>) -> tensor<31xi64>
        %255 = "index.ceildivs"(%35, %17) : (index, index) -> index
        "memref.store"(%0, %68, %16, %16, %16) <{nontemporal = false}> : (i32, memref<?x?x?xi32>, index, index, index) -> ()
        %256 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<1x21xi16>
        %257 = "tensor.empty"() : () -> tensor<31x21xi16>
        %258 = "linalg.matmul"(%236, %256, %257) <{operandSegmentSizes = array<i32: 2, 1>}> ({
        ^bb0(%arg7: i16, %arg8: i16, %arg9: i16):
          %282 = "arith.muli"(%arg7, %arg8) : (i16, i16) -> i16
          %283 = "arith.addi"(%arg9, %282) : (i16, i16) -> i16
          "linalg.yield"(%283) : (i16) -> ()
        }) : (tensor<31x1xi16>, memref<1x21xi16>, tensor<31x21xi16>) -> tensor<31x21xi16>
        %259 = "arith.cmpi"(%170, %250) <{predicate = 3 : i64}> : (i1, i1) -> i1
        %260 = "index.ceildivs"(%22, %46) : (index, index) -> index
        "affine.vector_store"(%83, %73, %27) <{map = affine_map<(d0) -> (d0)>}> : (vector<31xi32>, memref<?xi32>, index) -> ()
        %261 = "vector.transfer_read"(%58, %32, %18, %142, %146) <{operandSegmentSizes = array<i32: 1, 3, 1, 0>, permutation_map = affine_map<(d0, d1, d2) -> (d1, d2)>}> : (tensor<?x?x?xf16>, index, index, index, f16) -> vector<21x18xf16>
        %262 = "vector.flat_transpose"(%84) <{columns = 31 : i32, rows = 1 : i32}> : (vector<31xf32>) -> vector<31xf32>
        %263 = "vector.extract_strided_slice"(%145) <{offsets = [0], sizes = [1], strides = [1]}> : (vector<2xi32>) -> vector<1xi32>
        %264 = "vector.extract"(%126) <{static_position = array<i64: 0>}> : (vector<2xi32>) -> i32
        "affine.store"(%4, %102, %19, %27, %44) <{map = affine_map<(d0, d1, d2) -> (d0, d1, d2)>}> : (i64, memref<28x18x?xi64>, index, index, index) -> ()
        %265 = "math.rsqrt"(%2) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
        %266 = "tensor.cast"(%53) : (tensor<?xi64>) -> tensor<18xi64>
        %267 = "affine.min"(%37, %arg3, %45) <{map = affine_map<(d0, d1)[s0] -> (d0 + 2)>}> : (index, index, index) -> index
        %268 = "memref.alloc"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xi64>
        %269 = "vector.broadcast"(%9) : (i64) -> vector<28xi64>
        %270 = "vector.broadcast"(%170) : (i1) -> vector<28xi1>
        %271 = "vector.broadcast"(%15) : (i32) -> vector<28xi32>
        %272 = "vector.gather"(%268, %23, %40, %29, %271, %270, %269) : (memref<31x28x28xi64>, index, index, index, vector<28xi32>, vector<28xi1>, vector<28xi64>) -> vector<28xi64>
        %273 = "memref.alloca"(%267, %17, %20) <{operandSegmentSizes = array<i32: 3, 0>}> : (index, index, index) -> memref<?x?x?xf16>
        %274 = "affine.max"(%248, %35) <{map = affine_map<(d0)[s0] -> ((d0 - 128) * 8)>}> : (index, index) -> index
        %275 = "tensor.expand_shape"(%54) <{reassociation = [[0, 1]]}> : (tensor<31xi1>) -> tensor<31x1xi1>
        %276 = "math.tanh"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
        %277 = "vector.broadcast"(%98) : (f16) -> vector<31x28x28xf16>
        %278 = "vector.gather"(%238, %31, %39, %135, %111, %110, %277) : (tensor<31x28x28xf16>, index, index, index, vector<31x28x28xi32>, vector<31x28x28xi1>, vector<31x28x28xf16>) -> vector<31x28x28xf16>
        %279 = "index.maxs"(%26, %arg1) : (index, index) -> index
        %280 = "vector.broadcast"(%9) : (i64) -> vector<28x28x28x28xi64>
        %281 = "vector.contract"(%112, %112, %280) <{indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d4, d0, d1)>, affine_map<(d0, d1, d2, d3, d4) -> (d4, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>], iterator_types = [#vector.iterator_type<parallel>, #vector.iterator_type<parallel>, #vector.iterator_type<parallel>, #vector.iterator_type<parallel>, #vector.iterator_type<reduction>], kind = #vector.kind<and>}> : (vector<31x28x28xi64>, vector<31x28x28xi64>, vector<28x28x28x28xi64>) -> vector<28x28x28x28xi64>
        "linalg.yield"(%arg4) : (f16) -> ()
      }) : (memref<31x28x28xf16>, memref<31x28x28xf16>, memref<31x28x28xf16>, tensor<31x28x28xf16>) -> tensor<31x28x28xf16>
      %240 = "memref.atomic_rmw"(%2, %78, %16) <{kind = 0 : i64}> : (f16, memref<?xf16>, index) -> f16
      %241 = "math.round"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
      %242 = "arith.minui"(%154, %187) : (i1, i1) -> i1
      %243 = "arith.cmpf"(%80, %80) <{predicate = 15 : i64}> : (f32, f32) -> i1
      %244 = "math.sqrt"(%152) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
      %245 = "memref.realloc"(%77) : (memref<?xi64>) -> memref<21xi64>
      "scf.yield"() : () -> ()
    }) : (index, index, index, index, index, index) -> ()
    %201 = "tensor.collapse_shape"(%60) <{reassociation = [[0, 1], [2]]}> : (tensor<?x?x31xi1>) -> tensor<?x31xi1>
    %202 = "spirv.CL.s_min"(%126, %126) : (vector<2xi32>, vector<2xi32>) -> vector<2xi32>
    %203 = "scf.if"(%99) ({
      %228 = "arith.remf"(%181, %188) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %229 = "math.cttz"(%124) : (i1) -> i1
      %230 = "memref.alloc"(%44) <{operandSegmentSizes = array<i32: 1, 0>}> : (index) -> memref<?x18x31xf32>
      %231 = "math.ceil"(%49) <{fastmath = #arith.fastmath<none>}> : (tensor<21x18x31xf16>) -> tensor<21x18x31xf16>
      %232 = "vector.broadcast"(%7) : (i64) -> vector<28x28x28x28xi64>
      %233 = "vector.contract"(%112, %112, %232) <{indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d4, d0, d1)>, affine_map<(d0, d1, d2, d3, d4) -> (d4, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>], iterator_types = [#vector.iterator_type<parallel>, #vector.iterator_type<parallel>, #vector.iterator_type<parallel>, #vector.iterator_type<parallel>, #vector.iterator_type<reduction>], kind = #vector.kind<maxui>}> : (vector<31x28x28xi64>, vector<31x28x28xi64>, vector<28x28x28x28xi64>) -> vector<28x28x28x28xi64>
      "affine.vector_store"(%88, %71, %26) <{map = affine_map<(d0) -> (d0)>}> : (vector<31xi16>, memref<?xi16>, index) -> ()
      %234 = "affine.max"(%43, %29, %18) <{map = affine_map<(d0, d1)[s0] -> (d0 + 2)>}> : (index, index, index) -> index
      %235 = "arith.remf"(%122, %171) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      "scf.yield"(%15) : (i32) -> ()
    }, {
      %228 = "vector.broadcast"(%10) : (i1) -> vector<18xi1>
      %229 = "vector.mask"(%228) ({
        %237 = "vector.multi_reduction"(%166, %166) <{kind = #vector.kind<minsi>, reduction_dims = []}> : (vector<18xi16>, vector<18xi16>) -> vector<18xi16>
        "vector.yield"(%237) : (vector<18xi16>) -> ()
      }) : (vector<18xi1>) -> vector<18xi16>
      %230 = "index.shrs"(%38, %20) : (index, index) -> index
      %231 = "vector.multi_reduction"(%145, %0) <{kind = #vector.kind<xor>, reduction_dims = [0]}> : (vector<2xi32>, i32) -> i32
      %232 = "memref.alloca"() <{operandSegmentSizes = array<i32: 0, 0>}> : () -> memref<31x28x28xi32>
      "memref.assume_alignment"(%72) <{alignment = 8 : i32}> : (memref<31xi16>) -> ()
      %233 = "arith.remf"(%107, %171) <{fastmath = #arith.fastmath<none>}> : (f16, f16) -> f16
      %234 = "vector.maskedload"(%70, %44, %16, %25, %82, %82) : (memref<31x28x28xi1>, index, index, index, vector<31xi1>, vector<31xi1>) -> vector<31xi1>
      %235 = "vector.broadcast"(%80) : (f32) -> vector<21x18x31xf32>
      %236 = "vector.fma"(%235, %178, %235) : (vector<21x18x31xf32>, vector<21x18x31xf32>, vector<21x18x31xf32>) -> vector<21x18x31xf32>
      "scf.yield"(%15) : (i32) -> ()
    }) : (i1) -> i32
    %204 = "vector.load"(%102, %39, %31, %16) : (memref<28x18x?xi64>, index, index, index) -> vector<21x18x31xi64>
    %205 = "memref.cast"(%67) : (memref<28xf32>) -> memref<28xf32>
    %206 = "index.bool.constant"() <{value = false}> : () -> i1
    %207 = "arith.remf"(%153, %153) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
    %208 = "spirv.CL.sin"(%98) : (f16) -> f16
    %209 = "spirv.GL.Round"(%90) : (f16) -> f16
    %210 = "spirv.GL.FSign"(%157) : (f16) -> f16
    %211 = "spirv.GL.FClamp"(%14, %14, %156) : (f16, f16, f16) -> f16
    %212 = "math.log1p"(%146) <{fastmath = #arith.fastmath<none>}> : (f16) -> f16
    %213 = "memref.alloca"(%40, %44, %163) <{operandSegmentSizes = array<i32: 3, 0>}> : (index, index, index) -> memref<?x?x?xi16>
    %214 = "spirv.FOrdLessThanEqual"(%90, %14) : (f16, f16) -> i1
    %215 = "spirv.CL.rsqrt"(%153) : (f32) -> f32
    %216 = "math.rsqrt"(%50) <{fastmath = #arith.fastmath<none>}> : (tensor<?xf32>) -> tensor<?xf32>
    %217 = "spirv.GL.Tanh"(%215) : (f32) -> f32
    %218 = "spirv.BitwiseAnd"(%126, %145) : (vector<2xi32>, vector<2xi32>) -> vector<2xi32>
    %219 = "vector.extract_strided_slice"(%84) <{offsets = [5], sizes = [11], strides = [1]}> : (vector<31xf32>) -> vector<11xf32>
    %220 = "spirv.FNegate"(%107) : (f16) -> f16
    %221 = "arith.divf"(%153, %153) <{fastmath = #arith.fastmath<none>}> : (f32, f32) -> f32
    %222 = "tensor.empty"() : () -> tensor<31x28x28xi16>
    %223 = "vector.broadcast"(%5) : (i16) -> vector<31x28x28xi16>
    %224 = "vector.gather"(%222, %41, %34, %17, %111, %110, %223) : (tensor<31x28x28xi16>, index, index, index, vector<31x28x28xi32>, vector<31x28x28xi1>, vector<31x28x28xi16>) -> vector<31x28x28xi16>
    %225 = "spirv.CL.rsqrt"(%193) : (f16) -> f16
    %226 = "index.ceildivu"(%30, %17) : (index, index) -> index
    %227 = "spirv.CL.fabs"(%193) : (f16) -> f16
    "vector.print"(%81) <{punctuation = #vector.punctuation<newline>}> : (vector<31xf32>) -> ()
    "vector.print"(%82) <{punctuation = #vector.punctuation<newline>}> : (vector<31xi1>) -> ()
    "vector.print"(%83) <{punctuation = #vector.punctuation<newline>}> : (vector<31xi32>) -> ()
    "vector.print"(%84) <{punctuation = #vector.punctuation<newline>}> : (vector<31xf32>) -> ()
    "vector.print"(%88) <{punctuation = #vector.punctuation<newline>}> : (vector<31xi16>) -> ()
    "vector.print"(%89) <{punctuation = #vector.punctuation<newline>}> : (vector<31xi16>) -> ()
    "vector.print"(%109) <{punctuation = #vector.punctuation<newline>}> : (vector<31x28x28xi64>) -> ()
    "vector.print"(%110) <{punctuation = #vector.punctuation<newline>}> : (vector<31x28x28xi1>) -> ()
    "vector.print"(%111) <{punctuation = #vector.punctuation<newline>}> : (vector<31x28x28xi32>) -> ()
    "vector.print"(%112) <{punctuation = #vector.punctuation<newline>}> : (vector<31x28x28xi64>) -> ()
    "vector.print"(%126) <{punctuation = #vector.punctuation<newline>}> : (vector<2xi32>) -> ()
    "vector.print"(%145) <{punctuation = #vector.punctuation<newline>}> : (vector<2xi32>) -> ()
    "vector.print"(%166) <{punctuation = #vector.punctuation<newline>}> : (vector<18xi16>) -> ()
    "vector.print"(%176) <{punctuation = #vector.punctuation<newline>}> : (vector<18xi64>) -> ()
    "vector.print"(%178) <{punctuation = #vector.punctuation<newline>}> : (vector<21x18x31xf32>) -> ()
    "vector.print"(%179) <{punctuation = #vector.punctuation<newline>}> : (vector<21x18x31xf32>) -> ()
    "vector.print"(%183) <{punctuation = #vector.punctuation<newline>}> : (vector<21x18x31xi16>) -> ()
    "vector.print"(%184) <{punctuation = #vector.punctuation<newline>}> : (vector<21x18x31xi1>) -> ()
    "vector.print"(%185) <{punctuation = #vector.punctuation<newline>}> : (vector<21x18x31xi32>) -> ()
    "vector.print"(%186) <{punctuation = #vector.punctuation<newline>}> : (vector<21x18x31xi16>) -> ()
    "vector.print"(%196) <{punctuation = #vector.punctuation<newline>}> : (vector<31x28xi1>) -> ()
    "vector.print"(%204) <{punctuation = #vector.punctuation<newline>}> : (vector<21x18x31xi64>) -> ()
    "vector.print"(%219) <{punctuation = #vector.punctuation<newline>}> : (vector<11xf32>) -> ()
    "vector.print"(%223) <{punctuation = #vector.punctuation<newline>}> : (vector<31x28x28xi16>) -> ()
    "vector.print"(%224) <{punctuation = #vector.punctuation<newline>}> : (vector<31x28x28xi16>) -> ()
    "vector.print"(%0) <{punctuation = #vector.punctuation<newline>}> : (i32) -> ()
    "vector.print"(%1) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%2) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%3) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%4) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%5) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%6) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%7) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%8) <{punctuation = #vector.punctuation<newline>}> : (i16) -> ()
    "vector.print"(%9) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%10) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%11) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%12) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%13) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%14) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%15) <{punctuation = #vector.punctuation<newline>}> : (i32) -> ()
    "vector.print"(%80) <{punctuation = #vector.punctuation<newline>}> : (f32) -> ()
    "vector.print"(%90) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%92) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%95) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%98) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%99) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%100) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%107) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%114) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%119) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%121) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%122) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%124) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%129) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%131) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%133) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%139) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%140) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%141) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%143) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%144) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%146) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%148) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%152) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%153) <{punctuation = #vector.punctuation<newline>}> : (f32) -> ()
    "vector.print"(%154) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%156) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%157) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%158) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%162) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%164) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%169) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%170) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%171) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%173) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%177) <{punctuation = #vector.punctuation<newline>}> : (i64) -> ()
    "vector.print"(%181) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%187) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%188) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%193) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%198) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%199) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%200) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%203) <{punctuation = #vector.punctuation<newline>}> : (i32) -> ()
    "vector.print"(%206) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%208) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%209) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%210) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%211) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%214) <{punctuation = #vector.punctuation<newline>}> : (i1) -> ()
    "vector.print"(%215) <{punctuation = #vector.punctuation<newline>}> : (f32) -> ()
    "vector.print"(%217) <{punctuation = #vector.punctuation<newline>}> : (f32) -> ()
    "vector.print"(%220) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%225) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "vector.print"(%227) <{punctuation = #vector.punctuation<newline>}> : (f16) -> ()
    "func.return"() : () -> ()
  }) : () -> ()
}) : () -> ()
