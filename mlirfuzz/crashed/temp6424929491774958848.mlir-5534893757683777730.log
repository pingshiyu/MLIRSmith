mlir-opt: /home/jacob/projects/MLIRSmith/llvm/include/llvm/Support/Casting.h:566: decltype(auto) llvm::cast(const From&) [with To = mlir::RankedTensorType; From = mlir::Type]: Assertion `isa<To>(Val) && "cast<Ty>() argument of incompatible type!"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: ../build/bin/mlir-opt --sparse-compiler generated/temp6424929491774958848.mlir
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  mlir-opt        0x0000559d9e857bdb llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 59
1  mlir-opt        0x0000559d9e8549cc
2  libpthread.so.0 0x00007f0d7242d980
3  libc.so.6       0x00007f0d7105ae87 gsignal + 199
4  libc.so.6       0x00007f0d7105c7f1 abort + 321
5  libc.so.6       0x00007f0d7104c3fa
6  libc.so.6       0x00007f0d7104c472
7  mlir-opt        0x0000559d9fdce1e6
8  mlir-opt        0x0000559d9fdf42ae
9  mlir-opt        0x0000559d9ef9b0e7
10 mlir-opt        0x0000559da39a5bd4 mlir::PatternApplicator::matchAndRewrite(mlir::Operation*, mlir::PatternRewriter&, llvm::function_ref<bool (mlir::Pattern const&)>, llvm::function_ref<void (mlir::Pattern const&)>, llvm::function_ref<mlir::LogicalResult (mlir::Pattern const&)>) + 2884
11 mlir-opt        0x0000559da108dc50
12 mlir-opt        0x0000559da10915b1 mlir::applyPatternsAndFoldGreedily(mlir::Region&, mlir::FrozenRewritePatternSet const&, mlir::GreedyRewriteConfig, bool*) + 3153
13 mlir-opt        0x0000559d9fdb7e5a
14 mlir-opt        0x0000559d9fdba67c
15 mlir-opt        0x0000559da0fcf301 mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int) + 1297
16 mlir-opt        0x0000559da0fcf6ba mlir::detail::OpToOpPassAdaptor::runPipeline(mlir::OpPassManager&, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int, mlir::PassInstrumentor*, mlir::PassInstrumentation::PipelineParentInfo const*) + 250
17 mlir-opt        0x0000559da0fd00b4
18 mlir-opt        0x0000559d9fdf7767
19 mlir-opt        0x0000559da0fcf301 mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool, unsigned int) + 1297
20 mlir-opt        0x0000559da0fd0223
21 mlir-opt        0x0000559da0fd08c1 mlir::PassManager::run(mlir::Operation*) + 1153
22 mlir-opt        0x0000559da0fc0efc
23 mlir-opt        0x0000559da0fc28b5
24 mlir-opt        0x0000559da0fc2a71
25 mlir-opt        0x0000559da10c8260 mlir::splitAndProcessBuffer(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::function_ref<mlir::LogicalResult (std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, llvm::raw_ostream&)>, llvm::raw_ostream&, bool, bool) + 96
26 mlir-opt        0x0000559da0fbbbc9 mlir::MlirOptMain(llvm::raw_ostream&, std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer>>, mlir::DialectRegistry&, mlir::MlirOptMainConfig const&) + 185
27 mlir-opt        0x0000559da0fc2d9a mlir::MlirOptMain(int, char**, llvm::StringRef, mlir::DialectRegistry&) + 746
28 mlir-opt        0x0000559d9e7aa0c5 main + 165
29 libc.so.6       0x00007f0d7103dc87 __libc_start_main + 231
30 mlir-opt        0x0000559d9e82b95a _start + 42
Aborted
